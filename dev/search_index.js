var documenterSearchIndex = {"docs":
[{"location":"CommonTypes/types/#CommonTypes","page":"Types","title":"CommonTypes","text":"","category":"section"},{"location":"CommonTypes/types/","page":"Types","title":"Types","text":"The following abstract types are defined, which are common parent types for all submodules within Astrodynamics.","category":"page"},{"location":"CommonTypes/types/","page":"Types","title":"Types","text":"AbstractBody\nOrbitalSystem\nAbstractTrajectory","category":"page"},{"location":"NBody/functions/#NBody-Calculations","page":"Functions","title":"NBody Calculations","text":"","category":"section"},{"location":"NBody/functions/","page":"Functions","title":"Functions","text":"Currently, two functions are provided to calculate information for a MultibodySystem: system_energy, which calculates the total energy for the system, and system_angular_momentum, which calculates the total angular momentum for the system.","category":"page"},{"location":"NBody/functions/","page":"Functions","title":"Functions","text":"system_energy\nsystem_angular_momentum","category":"page"},{"location":"Maneuvers/types/#Maneuvers-Data-Structures","page":"Data Structures and Types","title":"Maneuvers Data Structures","text":"","category":"section"},{"location":"Maneuvers/types/","page":"Data Structures and Types","title":"Data Structures and Types","text":"Maneuvers are a current focus in development. The currently developed types are shown below.","category":"page"},{"location":"Maneuvers/types/","page":"Data Structures and Types","title":"Data Structures and Types","text":"AbstractManeuver\nConstantManeuver","category":"page"},{"location":"NBody/types/#NBody-Data-Structures","page":"Data Structures and Types","title":"NBody Data Structures","text":"","category":"section"},{"location":"NBody/types/","page":"Data Structures and Types","title":"Data Structures and Types","text":"As with TwoBody Data Structures, the NBody submodule includes data structures for storing multibody orbital states. The Body structure holds position, velocity, and mass information for a single body. A MultibodySystem contains an array of Body structures, and is used to completely describe a multibody orbital state.","category":"page"},{"location":"NBody/types/","page":"Data Structures and Types","title":"Data Structures and Types","text":"Body\nNBodySystem","category":"page"},{"location":"OrbitPlots/functions/#Plotting-TwoBody-and-NBody-Systems","page":"Functions","title":"Plotting TwoBody and NBody Systems","text":"","category":"section"},{"location":"OrbitPlots/functions/","page":"Functions","title":"Functions","text":"TwoBodyPropagationResult and MultibodyPropagationResult structs can be plotted with the plot function. Currently, two-body orbits can be plotted in the Perifocal (2D) frame, and the Cartesian (3D) frame. N-body systems can currently only be plotted in 3D.","category":"page"},{"location":"OrbitPlots/functions/","page":"Functions","title":"Functions","text":"orbitplot\nlagrangeplot","category":"page"},{"location":"Propagators/types/#Storing-Propagation-Results","page":"Data Structures and Types","title":"Storing Propagation Results","text":"","category":"section"},{"location":"Propagators/types/","page":"Data Structures and Types","title":"Data Structures and Types","text":"Both TwoBody and NBody systems have a structure for storing propagation results.","category":"page"},{"location":"Propagators/types/","page":"Data Structures and Types","title":"Data Structures and Types","text":"Trajectory","category":"page"},{"location":"Propagators/types/#UnitfulAstrodynamics.Orbits.Trajectory","page":"Data Structures and Types","title":"UnitfulAstrodynamics.Orbits.Trajectory","text":"A Trajectory is just a vector of Orbit instances!\n\n\n\n\n\n","category":"type"},{"location":"Propagators/functions/#Propagating-Orbits","page":"Functions","title":"Propagating Orbits","text":"","category":"section"},{"location":"Propagators/functions/","page":"Functions","title":"Functions","text":"A function propagate is defined for both TwoBody and NBody orbits.","category":"page"},{"location":"Propagators/functions/","page":"Functions","title":"Functions","text":"propagate\nRestrictedTwoBodyTic!\nRestrictedThreeBodyTic!\nNBodyTic!","category":"page"},{"location":"Propagators/functions/#UnitfulAstrodynamics.Propagators.propagate","page":"Functions","title":"UnitfulAstrodynamics.Propagators.propagate","text":"Uses DifferentialEquations solvers to propagate orbit Δt into the future. All keyword arguments are passed directly to DifferentialEquations.solve.\n\n\n\n\n\nUses DifferentialEquations solvers to propagate normalized,  Synodic CR3BP states Δt into the future. All keyword arguments are passed  directly to DifferentialEquations solvers.\n\n\n\n\n\nUses DifferentialEquations solvers to propagate normalized,  Synodic CR3BP states Δt into the future. All keyword arguments are passed  directly to DifferentialEquations solvers.\n\n\n\n\n\n","category":"function"},{"location":"ThreeBody/types/#ThreeBody-Data-Structures","page":"Data Structures and Types","title":"ThreeBody Data Structures","text":"","category":"section"},{"location":"ThreeBody/types/","page":"Data Structures and Types","title":"Data Structures and Types","text":"The ThreeBody module contains one key structure: ThreeBodySystem. A ThreeBodySystem holds the  nondimensional state of the spacecraft within the Circular Restricted Three-body Problem.","category":"page"},{"location":"ThreeBody/types/","page":"Data Structures and Types","title":"Data Structures and Types","text":"RestrictedThreeBodySystem\nThreeBodyState\nNondimensionalThreeBodyState","category":"page"},{"location":"Overview/getting-started/#Getting-Started","page":"Getting Stated","title":"Getting Started","text":"","category":"section"},{"location":"Overview/getting-started/#Installation","page":"Getting Stated","title":"Installation","text":"","category":"section"},{"location":"Overview/getting-started/","page":"Getting Stated","title":"Getting Stated","text":"UnitfulAstrodynamics is included in Julia's General package registry.","category":"page"},{"location":"Overview/getting-started/","page":"Getting Stated","title":"Getting Stated","text":"# In Julia's REPL\n]add UnitfulAstrodynamics\n\n# Or, with `Pkg`\nimport Pkg\nPkg.add(\"UnitfulAstrodynamics\")","category":"page"},{"location":"Overview/getting-started/#Units-are-Provided!","page":"Getting Stated","title":"Units are Provided!","text":"","category":"section"},{"location":"Overview/getting-started/","page":"Getting Stated","title":"Getting Stated","text":"UnitfulAstrodynamics.jl uses Reexport.jl to expose Unitful, UnitfulAstro, and UnitfulAngles. Units are required for all TwoBody, ThreeBody, and NBody data structures. Functions often have non-unit equivalents –  check the docstrings!","category":"page"},{"location":"Overview/getting-started/#TwoBody","page":"Getting Stated","title":"TwoBody","text":"","category":"section"},{"location":"Overview/getting-started/","page":"Getting Stated","title":"Getting Stated","text":"The TwoBody module handles Astrodynamics scenarios within the two-body problem. You can make a Orbit by specifying a CelestialBody (Sun, Earth, Moon, Mars, etc.), and a Cartesian or Keplerian state.","category":"page"},{"location":"Overview/getting-started/","page":"Getting Stated","title":"Getting Stated","text":"# Cartesian state to Orbit\nr      = [0.0, 11681.0, 0.0]u\"km\"\nv      = [5.134, 4.226, 2.787]u\"km/s\"\norbit1 = TwoBodyState(r, v, Earth)\n\n# Keplerian state to Orbit\ne      =  0.3\na      =  15000    * u\"km\" + Earth.R\ni      =  10       * u\"°\"\nΩ      =  0        * u\"°\"\nω      =  10       * u\"°\"\nν      =  0        * u\"°\"\norbit2 =  KeplerianState(e, a, i, Ω, ω, ν, Earth)\n\n# This is a true fact!\norbit1 ≈ orbit2\n\n# For the rest of this section...\norbit = orbit1","category":"page"},{"location":"Overview/getting-started/","page":"Getting Stated","title":"Getting Stated","text":"Now you can solve Kepler's Prediction Problem,  propagate the satellite's trajectory over a specified intervol in time, and plot the resultant trajectory with Plots.jl.","category":"page"},{"location":"Overview/getting-started/","page":"Getting Stated","title":"Getting Stated","text":"# Kepler's Prediction problem\norbit_later = kepler(orbit, period(orbit))\n\n# Lambert's Proplem\nv₁, v₂ = lambert(orbit.r, orbit_later.r, Earth.μ, period(orbit), :short)\n\n# Orbit propagation\nsols = propagate(orbit, period(orbit))\n\n# Plotting (with Plots.jl kwargs)\nplot(sols; title=\"Plots.jl keywords work!\", xlabel=\"Woo\")\n\n# Another true fact!\nsols.step[end] ≈ orbit_later","category":"page"},{"location":"Overview/getting-started/","page":"Getting Stated","title":"Getting Stated","text":"You may have noticed the orbital_period function. All common two-body problem equations have been included as functions with common arguments,orbital_period(a, μ), and with Astrodynamics.jl structure arguments, orbital_period(orbit). The current list of supported functions is described in TwoBody Calculations.","category":"page"},{"location":"Overview/getting-started/","page":"Getting Stated","title":"Getting Stated","text":"Not sure how to use one of those helper functions? Check the docstrings in Julia's REPL!","category":"page"},{"location":"Overview/getting-started/","page":"Getting Stated","title":"Getting Stated","text":"help?> eccentricity\nsearch: eccentricity eccentricity_vector\n\n  eccentricity(r̅, v̅, μ)\n  eccentricity(orbit::TwoBodyState)\n  eccentricity(orbit::KeplerianState)\n\n  Returns orbital eccentricity, e.","category":"page"},{"location":"Overview/getting-started/#ThreeBody","page":"Getting Stated","title":"ThreeBody","text":"","category":"section"},{"location":"Overview/getting-started/","page":"Getting Stated","title":"Getting Stated","text":"The ThreeBody module helps to solve the Circular Restricted ThreeBody problem.","category":"page"},{"location":"Overview/getting-started/","page":"Getting Stated","title":"Getting Stated","text":"# Hardcode Gravity parameters for the Sun, \n# and the Earth-Moon System\nμₛ = 1.32712440018e20u\"m^3/s^2\"\nμₑ = 4.035032351966808e14u\"m^3/s^2\"\n\n# Dimensional initial conditions for spacecraft\nr = [2e9, 7000, 2000]u\"km\"\nv = [0.001, 0.08, 0.02]u\"km/s\"\nt = 500u\"d\"\na = 1u\"AU\"\n\n# Construct nondimensional state\nsys = ThreeBodySystem(μₛ, μₑ, a, r, v, t) |> nondimensionalize\n\n# Propagate!\nsols = propagate(sys)\n\n# Halo solvers\nμ = nondimensionalize(Sun.μ, Earth.μ)\nr, v, T = analyticalhalo(μ; L = 1, steps = 1000)\nr, v, T = halo(μⁿ; Az = 0.02, L = 2)","category":"page"},{"location":"Overview/getting-started/#NBody","page":"Getting Stated","title":"NBody","text":"","category":"section"},{"location":"Overview/getting-started/","page":"Getting Stated","title":"Getting Stated","text":"The NBody module helps to solve the classical gravitational NBody problem. This is the baby version - point mass bodies, and no relativity. But it's still useful!","category":"page"},{"location":"Overview/getting-started/","page":"Getting Stated","title":"Getting Stated","text":"You can make your own Body by specifying an initial Cartesian state, and a mass.","category":"page"},{"location":"Overview/getting-started/","page":"Getting Stated","title":"Getting Stated","text":"# It's MY Earth, and I want it now\nr₁ = [0.0, 0.0, 0.0]u\"km\"\nv₁ = [0.0, 0.0, 0.0]u\"km/s\"\nm₁ = Earth.m\nmyEarth = Body(r₁, v₁, m₁)\n\n# And we'll need a satellite...\nr₂ = [0.0, 11681.0, 0.0]u\"km\"\nv₂ = [5.134, 4.226, 2.787]u\"km/s\"\nm₂ = 1000.0u\"kg\"\nmySatellite = Body(r₂, v₂, m₂)","category":"page"},{"location":"Overview/getting-started/","page":"Getting Stated","title":"Getting Stated","text":"A NBodySystem contains an array of Bodies.","category":"page"},{"location":"Overview/getting-started/","page":"Getting Stated","title":"Getting Stated","text":"# Construct a MultibodySystem\nsys = NBodySystem(myEarth, mySatellite)","category":"page"},{"location":"Overview/getting-started/","page":"Getting Stated","title":"Getting Stated","text":"And you can propagate a MultibodySystem through time to numerically find the final states for each Body. The package DifferentialEquations.jl is used for the numerical integration. For all propagation functions in Astrodynamics.jl, you can specify kwargs as you would for a DifferentialEquations.jl solve call.","category":"page"},{"location":"Overview/getting-started/","page":"Getting Stated","title":"Getting Stated","text":"# Propagate n-body system\nsols = propagate(sys, 10000u\"s\"; abstol=1e-14, reltol=1e-14)","category":"page"},{"location":"Overview/getting-started/","page":"Getting Stated","title":"Getting Stated","text":"As with a two-body Orbit, you can also plot each timestep in the n-body propagation.","category":"page"},{"location":"Overview/getting-started/","page":"Getting Stated","title":"Getting Stated","text":"# Plot n-body propagation results\nplot(sols; title=\"Plots.jl keywords work!\", xlabel=\"Woo\")","category":"page"},{"location":"TwoBody/types/#TwoBody-Data-Structures","page":"Data Structures and Types","title":"TwoBody Data Structures","text":"","category":"section"},{"location":"TwoBody/types/","page":"Data Structures and Types","title":"Data Structures and Types","text":"The TwoBody module contains two key structures: Orbit and CelestialBody.","category":"page"},{"location":"TwoBody/types/","page":"Data Structures and Types","title":"Data Structures and Types","text":"An Orbit is the core structure for TwoBody calculations. It contains an orbital state (both Cartesian and the equivalent Keplerian representation), and a central body.","category":"page"},{"location":"TwoBody/types/","page":"Data Structures and Types","title":"Data Structures and Types","text":"The central body within Orbit is of type CelestialBody. Common bodies in our solar system have been added for convenience, as described in Default CelestialBodies, but you can also make your own.","category":"page"},{"location":"TwoBody/types/","page":"Data Structures and Types","title":"Data Structures and Types","text":"TwoBodyState\nKeplerianState\nOrbit\nCelestialBody","category":"page"},{"location":"TwoBody/types/#UnitfulAstrodynamics.Orbits.KeplerianState","page":"Data Structures and Types","title":"UnitfulAstrodynamics.Orbits.KeplerianState","text":"Struct for storing Keplerian states.\n\n\n\n\n\n","category":"type"},{"location":"TwoBody/types/#UnitfulAstrodynamics.Orbits.Orbit","page":"Data Structures and Types","title":"UnitfulAstrodynamics.Orbits.Orbit","text":"RestrictedTwoBodyOrbit instanes are likely the most commonly used feature of this package. To accomadate this, Orbit is an alias for common  RestrictedTwoBodyOrbit constructers.\n\n\n\n\n\nRestrictedTwoBodyOrbit instanes are likely the most commonly used feature of this package. To accomadate this, Orbit is an alias for common  RestrictedTwoBodyOrbit constructers.\n\n\n\n\n\nRestrictedTwoBodyOrbit instanes are likely the most commonly used feature of this package. To accomadate this, Orbit is an alias for common  RestrictedTwoBodyOrbit constructers.\n\n\n\n\n\nRestrictedTwoBodyOrbit instanes are likely the most commonly used feature of this package. To accomadate this, Orbit is an alias for common  RestrictedTwoBodyOrbit constructers.\n\n\n\n\n\nA simpler constructor for a Synodic CR3BP state with or  without the local linearization (state transition matrix)  included.\n\nPlease note that this is a convenience constructor for quick calculations. This method is not type stable, since the kwarg include_stm directly affects the output type of the function. This sub-optimal code is great for  quickly constructing an initial state, but this method will be slower  than an explicit CircularRestrictedThreeBodyOrbit constructor.\n\n\n\n\n\n","category":"function"},{"location":"TwoBody/types/#Abstract-Types-and-Pre-defined-Parameters","page":"Data Structures and Types","title":"Abstract Types and Pre-defined Parameters","text":"","category":"section"},{"location":"TwoBody/types/","page":"Data Structures and Types","title":"Data Structures and Types","text":"The first section in TwoBody documentation described the core TwoBody Data Structures. Each data structure has an abstract parent type. All Orbit structures extend TwoBodySystem. In addition, all Orbit structures are paremeterized by their conic section, which is of type AbstractConic. All conic sections are pre-defined structures: Circular, Elliptical, Parabolic, Hyperbolic, and the Invalid conic is used to describe invalid orbital states (such as providing a NaN value to an Orbit constructor).","category":"page"},{"location":"TwoBody/types/","page":"Data Structures and Types","title":"Data Structures and Types","text":"RestrictedTwoBodySystem\nAbstractConic\nCircular\nElliptical\nParabolic\nHyperbolic\nInvalid","category":"page"},{"location":"TwoBody/types/#UnitfulAstrodynamics.Orbits.RestrictedTwoBodySystem","page":"Data Structures and Types","title":"UnitfulAstrodynamics.Orbits.RestrictedTwoBodySystem","text":"Type representing large bodies in space. Currently, the following solar system bodies are supported:\n\nSun, Mercury, Venus, Earth, Moon (Luna), Mars, Jupiter,  Saturn, Uranus, Neptune, Pluto.\n\n\n\n\n\n","category":"type"},{"location":"TwoBody/types/#UnitfulAstrodynamics.Orbits.AbstractConic","page":"Data Structures and Types","title":"UnitfulAstrodynamics.Orbits.AbstractConic","text":"Abstract type for all four conic sections.\n\n\n\n\n\n","category":"type"},{"location":"TwoBody/types/#UnitfulAstrodynamics.Orbits.Circular","page":"Data Structures and Types","title":"UnitfulAstrodynamics.Orbits.Circular","text":"Type for orbits in the circular conic section.\n\n\n\n\n\n","category":"type"},{"location":"TwoBody/types/#UnitfulAstrodynamics.Orbits.Elliptical","page":"Data Structures and Types","title":"UnitfulAstrodynamics.Orbits.Elliptical","text":"Type for orbits in the elliptical conic section.\n\n\n\n\n\n","category":"type"},{"location":"TwoBody/types/#UnitfulAstrodynamics.Orbits.Parabolic","page":"Data Structures and Types","title":"UnitfulAstrodynamics.Orbits.Parabolic","text":"Type for orbits in the parabolic conic section.\n\n\n\n\n\n","category":"type"},{"location":"TwoBody/types/#UnitfulAstrodynamics.Orbits.Hyperbolic","page":"Data Structures and Types","title":"UnitfulAstrodynamics.Orbits.Hyperbolic","text":"Type for orbits in the hyperbolic conic section.\n\n\n\n\n\n","category":"type"},{"location":"TwoBody/types/#UnitfulAstrodynamics.Orbits.Invalid","page":"Data Structures and Types","title":"UnitfulAstrodynamics.Orbits.Invalid","text":"Type for invalid orbits (orbits with NaN fields)\n\n\n\n\n\n","category":"type"},{"location":"TwoBody/types/#Default-CelestialBodies","page":"Data Structures and Types","title":"Default CelestialBodies","text":"","category":"section"},{"location":"TwoBody/types/","page":"Data Structures and Types","title":"Data Structures and Types","text":"For convenence, the following common bodies in our solar system have already been defined!","category":"page"},{"location":"TwoBody/types/","page":"Data Structures and Types","title":"Data Structures and Types","text":"Sun\nMercury \nVenus\nEarth \nMoon\nLuna\nMars\nJupiter \nSaturn\nUranus\nNeptune\nPluto","category":"page"},{"location":"Maneuvers/functions/#Maneuvers-Calculations","page":"Functions","title":"Maneuvers Calculations","text":"","category":"section"},{"location":"Maneuvers/functions/","page":"Functions","title":"Functions","text":"Currently, Maneuvers focuses on the twobody problem. The following functions have been developed. More to come!","category":"page"},{"location":"Maneuvers/functions/","page":"Functions","title":"Functions","text":"escape_radius\nescape_velocity\nescape_time\nescape_path_length","category":"page"},{"location":"Overview/about/#Package-Overview","page":"About","title":"Package Overview","text":"","category":"section"},{"location":"Overview/about/","page":"About","title":"About","text":"UnitfulAstrodynamics.jl is a Unitful Astrodynamics library, which includes TwoBody and NBody problem calculations, as well as orbit propagation and plotting!","category":"page"},{"location":"Overview/about/#Motivation","page":"About","title":"Motivation","text":"","category":"section"},{"location":"Overview/about/","page":"About","title":"About","text":"This package aims to provide a simple interface for common astrodynamics problems. It was created to learn more about Astrodynamics, and will be developed alongside a Graduate Astrodynamics course at the University of Maryland. The packages JuliaSpace/Astrodynamics.jl JuliaAstro/AstroBase.jlare more fully featured. I will continue adding features to this package, but for a more complete feature set, use the packages provided by JuliaSpace and JuliaAstro.","category":"page"},{"location":"Overview/about/#Credits","page":"About","title":"Credits","text":"","category":"section"},{"location":"Overview/about/","page":"About","title":"About","text":"[1] Vallado, David A. Fundamentals of astrodynamics and applications. Vol. 12. Springer Science & Business Media, 2001.","category":"page"},{"location":"Overview/about/","page":"About","title":"About","text":"All equations and algorithms within UnitfulAstrodynamics are pulled from Vallado's Fundamentals of Astrodynamics and Applications, as well as course notes from ENAE 601 (Astrodynamics) at the University of Maryland.","category":"page"},{"location":"Overview/about/","page":"About","title":"About","text":"[2] Unitful.jl and UnitfulAstro.jl are used for unit handling.","category":"page"},{"location":"ThreeBody/functions/#ThreeBody-Calculations","page":"Functions","title":"ThreeBody Calculations","text":"","category":"section"},{"location":"ThreeBody/functions/","page":"Functions","title":"Functions","text":"Common ThreeBody problem calculations are provided through functions. ","category":"page"},{"location":"ThreeBody/functions/#Frame-Representations","page":"Functions","title":"Frame Representations","text":"","category":"section"},{"location":"ThreeBody/functions/","page":"Functions","title":"Functions","text":"You can convert between the Inertial and Rotating (Synodic) reference frames through the inertial and synodic functions.","category":"page"},{"location":"ThreeBody/functions/","page":"Functions","title":"Functions","text":"inertial\nsynodic","category":"page"},{"location":"ThreeBody/functions/#UnitfulAstrodynamics.Orbits.inertial","page":"Functions","title":"UnitfulAstrodynamics.Orbits.inertial","text":"Given the Synodic frame vector, returns the vector in the inertial reference frame.\n\n\n\n\n\nGiven a SynodicCartesianState, returns the state in the inertial reference frame.\n\n\n\n\n\nIf given an inertial CartesianState, no operation needed.\n\n\n\n\n\nGiven a CR3BP orbit, returns the orbit in the inertial reference frame.\n\n\n\n\n\n","category":"function"},{"location":"ThreeBody/functions/#UnitfulAstrodynamics.Orbits.synodic","page":"Functions","title":"UnitfulAstrodynamics.Orbits.synodic","text":"Given an InertialCartesianState, returns the state in the synodic (rotating) reference frame.\n\n\n\n\n\nIf given a Synodic CartesianState, no operation needed.\n\n\n\n\n\nGiven a CR3BP orbit, returns the orbit in the Synodic (rotating) reference frame.\n\n\n\n\n\n","category":"function"},{"location":"ThreeBody/functions/#Dimensionalization","page":"Functions","title":"Dimensionalization","text":"","category":"section"},{"location":"ThreeBody/functions/","page":"Functions","title":"Functions","text":"Functions to nondimensionalize spacecraft states, and re-dimensionalize spacecraft states are provided.","category":"page"},{"location":"ThreeBody/functions/","page":"Functions","title":"Functions","text":"time_scale_factor\nnondimensionalize_length\nnondimensionalize_velocity\nnondimensionalize_time\nnondimensionalize_mass_parameter\nnondimensionalize\nredimensionalize_length\nredimensionalize_velocity\nredimensionalize_time\nredimensionalize","category":"page"},{"location":"ThreeBody/functions/#UnitfulAstrodynamics.Orbits.time_scale_factor","page":"Functions","title":"UnitfulAstrodynamics.Orbits.time_scale_factor","text":"Returns time scale factor, Tₛ.\n\n\n\n\n\n","category":"function"},{"location":"ThreeBody/functions/#UnitfulAstrodynamics.Orbits.nondimensionalize_length","page":"Functions","title":"UnitfulAstrodynamics.Orbits.nondimensionalize_length","text":"Returns nondimensional length unit, DU.\n\n\n\n\n\n","category":"function"},{"location":"ThreeBody/functions/#UnitfulAstrodynamics.Orbits.nondimensionalize_velocity","page":"Functions","title":"UnitfulAstrodynamics.Orbits.nondimensionalize_velocity","text":"Returns nondimensional velocity unit, DU/DT.\n\n\n\n\n\n","category":"function"},{"location":"ThreeBody/functions/#UnitfulAstrodynamics.Orbits.nondimensionalize_time","page":"Functions","title":"UnitfulAstrodynamics.Orbits.nondimensionalize_time","text":"Returns nondimensional time unit, DT.\n\n\n\n\n\n","category":"function"},{"location":"ThreeBody/functions/#UnitfulAstrodynamics.Orbits.nondimensionalize","page":"Functions","title":"UnitfulAstrodynamics.Orbits.nondimensionalize","text":"Returns nondimensional form of (Unitful) scalar posiion.\n\n\n\n\n\nReturns nondimensional form of (Unitful) position vector.\n\n\n\n\n\nReturns nondimensional form of (Unitful) scalar velocity.\n\n\n\n\n\nReturns nondimensional form of (Unitful) velocity vector.\n\n\n\n\n\nReturns nondimensional form of (Unitful) velocity vector.\n\n\n\n\n\nReturns nondimensional form of (Unitful) time duration.\n\n\n\n\n\nReturns nondimensional form of (Unitful) time duration.\n\n\n\n\n\nReturns nondimensional form of (Unitful) graviational parameters.\n\n\n\n\n\nReturns nondimensional Circular Restricted Three-body State.\n\n\n\n\n\n","category":"function"},{"location":"ThreeBody/functions/#UnitfulAstrodynamics.Orbits.redimensionalize_length","page":"Functions","title":"UnitfulAstrodynamics.Orbits.redimensionalize_length","text":"Returns dimensional length units.\n\n\n\n\n\n","category":"function"},{"location":"ThreeBody/functions/#UnitfulAstrodynamics.Orbits.redimensionalize_velocity","page":"Functions","title":"UnitfulAstrodynamics.Orbits.redimensionalize_velocity","text":"Returns dimensional velocity units.\n\n\n\n\n\n","category":"function"},{"location":"ThreeBody/functions/#UnitfulAstrodynamics.Orbits.redimensionalize_time","page":"Functions","title":"UnitfulAstrodynamics.Orbits.redimensionalize_time","text":"Returns dimensional time unit.\n\n\n\n\n\nReturns dimensional time unit.\n\n\n\n\n\n","category":"function"},{"location":"ThreeBody/functions/#UnitfulAstrodynamics.Orbits.redimensionalize","page":"Functions","title":"UnitfulAstrodynamics.Orbits.redimensionalize","text":"Returns dimensional (inertial) form of (Unitful) scalar posiion.\n\n\n\n\n\nReturns dimensional (inertial) form of (Unitful) velocity vector.\n\n\n\n\n\nReturns dimensional (inertial) form of (Unitful) time duration.\n\n\n\n\n\nReturns dimensional (inertial) form of (Unitful) time duration.\n\n\n\n\n\nUn-normalizes (or re-dimensionalizes) a NormalizedCartesianState back into a CartesianState.\n\n\n\n\n\nUn-normalizes (or re-dimensionalizes) a NormalizedCartesianState back into a CartesianState.\n\n\n\n\n\n","category":"function"},{"location":"ThreeBody/functions/#Halo-Orbit-Solvers","page":"Functions","title":"Halo Orbit Solvers","text":"","category":"section"},{"location":"ThreeBody/functions/","page":"Functions","title":"Functions","text":"analyticalhalo\nhalo\nmonodromy","category":"page"},{"location":"ThreeBody/functions/#UnitfulAstrodynamics.Orbits.analyticalhalo","page":"Functions","title":"UnitfulAstrodynamics.Orbits.analyticalhalo","text":"Returns an analytical solution for a Halo orbit about L.\n\nArguments: \n\nμ: Non-dimensional mass parameter for the CR3BP system.\nAz: Desired non-dimensional Z-amplitude for Halo orbit.\nϕ: Desired Halo orbit phase.\nsteps: Number of non-dimensional timepoints in returned state.\nL: Lagrange point to orbit (L1 or L2).\nhemisphere: Specifies northern or southern Halo orbit.\n\nOutputs:\n\nSynodic position vector r::Array{<:AbstractFloat}\nSynodic velocity vector v::Array{<:Abstractfloat}.\nHalo orbit period Τ.\nThrows ArgumentError if L is not 1 or 2.\n\nReferences:\n\nRund, 2018.\n\n\n\n\n\n","category":"function"},{"location":"ThreeBody/functions/#UnitfulAstrodynamics.Propagators.halo","page":"Functions","title":"UnitfulAstrodynamics.Propagators.halo","text":"Returns a numerical solution for a Halo orbit about L.\n\nArguments: \n\nμ: Non-dimensional mass parameter for the CR3BP system.\nAz: Desired non-dimensional Z-amplitude for Halo orbit.\nϕ: Desired Halo orbit phase.\nL: Lagrange point to orbit (L1 or L2).\nhemisphere: Specifies northern or southern Halo orbit.\n\nOutputs:\n\nTuple of initial states: (r, v) where r::Vector{<:AbstractFloat}, v::Vector{<:Abstractfloat}.\nThrows ArgumentError if L is not :L1 or :L2\n\nReferences:\n\nRund, 2018.\n\n\n\n\n\nA halo wrapper! Returns a CircularRestrictedThreeBodyOrbit. Returns a tuple: halo_orbit, halo_period.\n\n\n\n\n\n","category":"function"},{"location":"ThreeBody/functions/#UnitfulAstrodynamics.Propagators.monodromy","page":"Functions","title":"UnitfulAstrodynamics.Propagators.monodromy","text":"Returns the Monodromy Matrix for a Halo orbit.\n\n\n\n\n\n","category":"function"},{"location":"ThreeBody/functions/#Other-Common-Calculations","page":"Functions","title":"Other Common Calculations","text":"","category":"section"},{"location":"ThreeBody/functions/","page":"Functions","title":"Functions","text":"potential_energy\njacobi_constant\nlagrange\npotential_energy_hessian\naccel\nRestrictedThreeBodySTMTic!\nstate_transition_dynamics\nnondimensional_radius","category":"page"},{"location":"ThreeBody/functions/#UnitfulAstrodynamics.Orbits.lagrange","page":"Functions","title":"UnitfulAstrodynamics.Orbits.lagrange","text":"Returns the lagrange points for a CR3BP system.\n\nArguments: \n\nμ: Non-dimensional mass parameter for the CR3BP system.\nL: Langrange points requested, must be in range [1,5]\n\nOutputs:\n\nTuple of Lagrange points\nThrows ArgumentError if L is out of range [1,5]\n\nReferences:\n\nRund, 2018\n\n\n\n\n\n","category":"function"},{"location":"ThreeBody/functions/#UnitfulAstrodynamics.Propagators.potential_energy_hessian","page":"Functions","title":"UnitfulAstrodynamics.Propagators.potential_energy_hessian","text":"Returns the partial derivative matrix of potential U.\n\nArguments:\n\nμ: Non-dimensional mass parameter for the CR3BP system.\nr: Non-dimensional position vector for the spacecraft.\n\nOutputs:\n\nPartial derivative matrix of potential U.\n\nReferences:\n\nRund, 2018\n\n\n\n\n\n","category":"function"},{"location":"ThreeBody/functions/#UnitfulAstrodynamics.Orbits.accel","page":"Functions","title":"UnitfulAstrodynamics.Orbits.accel","text":"Returns non-dimensional acceleration for CR3BP state.\n\n\n\n\n\n","category":"function"},{"location":"TwoBody/functions/#TwoBody-Calculations","page":"Functions","title":"TwoBody Calculations","text":"","category":"section"},{"location":"TwoBody/functions/","page":"Functions","title":"Functions","text":"For convenience, common TwoBody problem calculations are provided through functions.  Often, these functions are provided with common arguments (such as orbital_period(a,μ)), and with TwoBody Data Structures arguments (such as orbital_period(::Orbit)).","category":"page"},{"location":"TwoBody/functions/#Orbital-Representations","page":"Functions","title":"Orbital Representations","text":"","category":"section"},{"location":"TwoBody/functions/","page":"Functions","title":"Functions","text":"You can convert between Cartesian and Keplerian TwoBody orbital representations by using cartesian and keplerian.","category":"page"},{"location":"TwoBody/functions/","page":"Functions","title":"Functions","text":"cartesian\nkeplerian\nperifocal","category":"page"},{"location":"TwoBody/functions/#UnitfulAstrodynamics.Orbits.cartesian","page":"Functions","title":"UnitfulAstrodynamics.Orbits.cartesian","text":"Returns a Cartesian representation of a Keplerian two-body orbital state in an inertial frame, centered at the center of mass of the central body. Algorithm taught in ENAE601.\n\n\n\n\n\nReturns a Cartesian (inertial) representation of the provied Perifocal state.\n\n\n\n\n\n","category":"function"},{"location":"TwoBody/functions/#UnitfulAstrodynamics.Orbits.keplerian","page":"Functions","title":"UnitfulAstrodynamics.Orbits.keplerian","text":"Returns a Keplarian representation of a Cartesian orbital state. Algorithm taught in ENAE601.\n\n\n\n\n\n","category":"function"},{"location":"TwoBody/functions/#UnitfulAstrodynamics.Orbits.perifocal","page":"Functions","title":"UnitfulAstrodynamics.Orbits.perifocal","text":"Returns position and velocity vectors in the Perifocal frame.\n\n\n\n\n\n","category":"function"},{"location":"TwoBody/functions/#Kepler's-Prediction-Problem","page":"Functions","title":"Kepler's Prediction Problem","text":"","category":"section"},{"location":"TwoBody/functions/","page":"Functions","title":"Functions","text":"The function kepler can solve Kepler's Prediction Problem for an Orbit.","category":"page"},{"location":"TwoBody/functions/","page":"Functions","title":"Functions","text":"kepler","category":"page"},{"location":"TwoBody/functions/#UnitfulAstrodynamics.Orbits.kepler","page":"Functions","title":"UnitfulAstrodynamics.Orbits.kepler","text":"Solves Kepler's Problem for orbit and Δtᵢ.\n\n\n\n\n\nImplements Kepler's Prediction Problem for generic r, v.\n\nArguments:\n\nr: Initial spacecraft position. Any abstract vector with length 3 and type <: Unitful.Length\nv: Initial spacecraft velocity. Any abstract vector with length 3 and type <: Unitful.Velocity\nμ: Central body mass parameter. Any abstract vector with length 3 and type <: Unitful.AbstractQuantity with units compatabile with km^3/s^2\nΔtᵢ: Propagation time. Any scalar with type <: Unitful.Time\n\n\n\n\n\n","category":"function"},{"location":"TwoBody/functions/#Lambert's-Problem","page":"Functions","title":"Lambert's Problem","text":"","category":"section"},{"location":"TwoBody/functions/","page":"Functions","title":"Functions","text":"The function lambert can solve Lambert's Problem for an Orbit.","category":"page"},{"location":"TwoBody/functions/","page":"Functions","title":"Functions","text":"lambert","category":"page"},{"location":"TwoBody/functions/#UnitfulAstrodynamics.Orbits.lambert","page":"Functions","title":"UnitfulAstrodynamics.Orbits.lambert","text":"Solves Lambert's problem through the use of univeral variables.\n\n\n\n\n\n","category":"function"},{"location":"TwoBody/functions/#Common-TwoBody-Problem-Calculations","page":"Functions","title":"Common TwoBody Problem Calculations","text":"","category":"section"},{"location":"TwoBody/functions/","page":"Functions","title":"Functions","text":"semimajor_axis\neccentricity\neccentricity_vector\ninclination\ntrue_anomoly\nperiapsis_radius\napoapsis_radius\nperiapsis_velocity\napoapsis_velocity\nradius\nradius_vector\nvelocity\nvelocity_vector\nmass\nmass_parameter\nperiod\ntime_since_periapsis\nmean_motion\nmean_motion_vector\nsemi_parameter\neccentric_anomoly\nspecific_angular_momentum\nspecific_angular_momentum_vector\nspecific_energy\nconic","category":"page"},{"location":"TwoBody/functions/#UnitfulAstrodynamics.Orbits.semimajor_axis","page":"Functions","title":"UnitfulAstrodynamics.Orbits.semimajor_axis","text":"Returns Unitful Restricted Two-body orbit semimajor axis.\n\n\n\n\n\nReturns semimajor axis parameter, a.\n\n\n\n\n\n","category":"function"},{"location":"TwoBody/functions/#UnitfulAstrodynamics.Orbits.eccentricity","page":"Functions","title":"UnitfulAstrodynamics.Orbits.eccentricity","text":"Returns Unitful Restricted Two-body orbit eccentricity.\n\n\n\n\n\nReturns orbital eccentricity, e.\n\n\n\n\n\n","category":"function"},{"location":"TwoBody/functions/#UnitfulAstrodynamics.Orbits.eccentricity_vector","page":"Functions","title":"UnitfulAstrodynamics.Orbits.eccentricity_vector","text":"Returns orbital eccentricity vector e̅.\n\n\n\n\n\n","category":"function"},{"location":"TwoBody/functions/#UnitfulAstrodynamics.Orbits.inclination","page":"Functions","title":"UnitfulAstrodynamics.Orbits.inclination","text":"Returns Unitful Restricted Two-body orbit inclination.\n\n\n\n\n\nReturns orbital inclination, i.\n\n\n\n\n\nReturns orbital inclination, i.\n\n\n\n\n\n","category":"function"},{"location":"TwoBody/functions/#UnitfulAstrodynamics.Orbits.true_anomoly","page":"Functions","title":"UnitfulAstrodynamics.Orbits.true_anomoly","text":"Returns Unitful Restricted Two-body orbit true anomoly.\n\n\n\n\n\nReturns true anomoly, ν.\n\n\n\n\n\nReturns true anomoly, ν.\n\n\n\n\n\nReturns true anomoly, ν.\n\n\n\n\n\n","category":"function"},{"location":"TwoBody/functions/#UnitfulAstrodynamics.Orbits.periapsis_radius","page":"Functions","title":"UnitfulAstrodynamics.Orbits.periapsis_radius","text":"Returns periapsis scalar_position, rₚ.\n\n\n\n\n\n","category":"function"},{"location":"TwoBody/functions/#UnitfulAstrodynamics.Orbits.velocity_vector","page":"Functions","title":"UnitfulAstrodynamics.Orbits.velocity_vector","text":"Returns the Unitful velocity vector of the CartesianState.\n\n\n\n\n\nReturns velocity vector, vᵢ.\n\n\n\n\n\nReturns the Unitful velocity vector of the CartesianState.\n\n\n\n\n\n","category":"function"},{"location":"TwoBody/functions/#UnitfulAstrodynamics.Orbits.mass_parameter","page":"Functions","title":"UnitfulAstrodynamics.Orbits.mass_parameter","text":"Returns mass parameter μ.\n\n\n\n\n\n","category":"function"},{"location":"TwoBody/functions/#UnitfulAstrodynamics.Orbits.period","page":"Functions","title":"UnitfulAstrodynamics.Orbits.period","text":"Returns the orbital period.\n\n\n\n\n\nReturns the orbital period.\n\n\n\n\n\nReturns the orbital period.\n\n\n\n\n\nReturns the orbital period.\n\n\n\n\n\nReturns the orbital period.\n\n\n\n\n\n","category":"function"},{"location":"TwoBody/functions/#UnitfulAstrodynamics.Orbits.time_since_periapsis","page":"Functions","title":"UnitfulAstrodynamics.Orbits.time_since_periapsis","text":"Returns time since periapsis, t.\n\n\n\n\n\nReturns time since periapsis, t.\n\n\n\n\n\n","category":"function"},{"location":"TwoBody/functions/#UnitfulAstrodynamics.Orbits.mean_motion","page":"Functions","title":"UnitfulAstrodynamics.Orbits.mean_motion","text":"Returns mean motion, n.\n\n\n\n\n\n","category":"function"},{"location":"TwoBody/functions/#UnitfulAstrodynamics.Orbits.mean_motion_vector","page":"Functions","title":"UnitfulAstrodynamics.Orbits.mean_motion_vector","text":"Returns mean motion vector, n̄.\n\n\n\n\n\n","category":"function"},{"location":"TwoBody/functions/#UnitfulAstrodynamics.Orbits.semi_parameter","page":"Functions","title":"UnitfulAstrodynamics.Orbits.semi_parameter","text":"Returns semilatus parameter, p.\n\n\n\n\n\n","category":"function"},{"location":"TwoBody/functions/#UnitfulAstrodynamics.Orbits.eccentric_anomoly","page":"Functions","title":"UnitfulAstrodynamics.Orbits.eccentric_anomoly","text":"Returns eccentric anomoly, E, parabolic anomoly, B, or hyperbolic  anomoly, H. \n\n\n\n\n\n","category":"function"},{"location":"TwoBody/functions/#UnitfulAstrodynamics.Orbits.specific_angular_momentum","page":"Functions","title":"UnitfulAstrodynamics.Orbits.specific_angular_momentum","text":"Returns scalar specific angular momentum vector, h.\n\n\n\n\n\n","category":"function"},{"location":"TwoBody/functions/#UnitfulAstrodynamics.Orbits.specific_angular_momentum_vector","page":"Functions","title":"UnitfulAstrodynamics.Orbits.specific_angular_momentum_vector","text":"Returns specific angular momentum vector, h̅.\n\n\n\n\n\n","category":"function"},{"location":"TwoBody/functions/#UnitfulAstrodynamics.Orbits.specific_energy","page":"Functions","title":"UnitfulAstrodynamics.Orbits.specific_energy","text":"Returns specific orbital energy, ϵ.\n\n\n\n\n\n","category":"function"},{"location":"TwoBody/functions/#UnitfulAstrodynamics.Orbits.conic","page":"Functions","title":"UnitfulAstrodynamics.Orbits.conic","text":"Returns the conic section, as specified by eccentricity e.\n\n\n\n\n\n","category":"function"},{"location":"#UnitfulAstrodynamics.jl-Documentation","page":"Guide","title":"UnitfulAstrodynamics.jl Documentation","text":"","category":"section"},{"location":"#Overview","page":"Guide","title":"Overview","text":"","category":"section"},{"location":"","page":"Guide","title":"Guide","text":"Pages = [\"Overview/about.md\", \"Overview/getting-started.md\"]\nDepth = 1","category":"page"},{"location":"#TwoBody","page":"Guide","title":"TwoBody","text":"","category":"section"},{"location":"","page":"Guide","title":"Guide","text":"Pages = [\"TwoBody/types.md\", \"TwoBody/functions.md\"]\nDepth = 1","category":"page"},{"location":"#ThreeBody","page":"Guide","title":"ThreeBody","text":"","category":"section"},{"location":"","page":"Guide","title":"Guide","text":"Pages = [\"ThreeBody/types.md\", \"ThreeBody/functions.md\"]\nDepth = 1","category":"page"},{"location":"#NBody","page":"Guide","title":"NBody","text":"","category":"section"},{"location":"","page":"Guide","title":"Guide","text":"Pages = [\"NBody/types.md\", \"NBody/functions.md\"]\nDepth = 1","category":"page"},{"location":"#Propagators","page":"Guide","title":"Propagators","text":"","category":"section"},{"location":"","page":"Guide","title":"Guide","text":"Pages = [\"Propagators/types.md\", \"Propagators/functions.md\"]\nDepth = 1","category":"page"},{"location":"#Maneuvers","page":"Guide","title":"Maneuvers","text":"","category":"section"},{"location":"","page":"Guide","title":"Guide","text":"Pages = [\"Maneuvers/types.md\", \"Maneuvers/functions.md\"]\nDepth = 1","category":"page"},{"location":"#Plots","page":"Guide","title":"Plots","text":"","category":"section"},{"location":"","page":"Guide","title":"Guide","text":"Pages = [\"AstroPlots/functions.md\"]\nDepth = 1","category":"page"},{"location":"#Common-Types","page":"Guide","title":"Common Types","text":"","category":"section"},{"location":"","page":"Guide","title":"Guide","text":"Pages = [\"CommonTypes/types.md\"]\nDepth = 1","category":"page"}]
}
