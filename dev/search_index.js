var documenterSearchIndex = {"docs":
[{"location":"#GeneralAstrodynamics.jl","page":"Getting Started","title":"GeneralAstrodynamics.jl","text":"","category":"section"},{"location":"","page":"Getting Started","title":"Getting Started","text":"Common astrodynamics calculations in Julia, with units!","category":"page"},{"location":"","page":"Getting Started","title":"Getting Started","text":"note: Note\nThis package is fairly new, and documentation is even newer!  Thanks for your patience as we get these docs up and running. ","category":"page"},{"location":"","page":"Getting Started","title":"Getting Started","text":"For now, all we can offer are some humble docstrings. If you check back in September, you'll probably find some more detailed documentation, and examples!","category":"page"},{"location":"docstrings/#Docstrings","page":"Docstrings","title":"Docstrings","text":"","category":"section"},{"location":"docstrings/","page":"Docstrings","title":"Docstrings","text":"Documentation for all types, and functions in GeneralAstrodynamics.","category":"page"},{"location":"docstrings/#CoordinateFrames","page":"Docstrings","title":"CoordinateFrames","text":"","category":"section"},{"location":"docstrings/","page":"Docstrings","title":"Docstrings","text":"Modules = [\n    GeneralAstrodynamics.CoordinateFrames\n]\nOrder = [:type, :function]","category":"page"},{"location":"docstrings/#GeneralAstrodynamics.CoordinateFrames.BarycentricInertial","page":"Docstrings","title":"GeneralAstrodynamics.CoordinateFrames.BarycentricInertial","text":"abstract type BarycentricInertial <: Inertial\n\nabstract type BarycentricInertial <: Inertial\n\nA supertype for all barycentric-ineretial coordinate frames in space.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#GeneralAstrodynamics.CoordinateFrames.BarycentricRotating","page":"Docstrings","title":"GeneralAstrodynamics.CoordinateFrames.BarycentricRotating","text":"abstract type BarycentricRotating <: Rotating\n\nabstract type BarycentricRotating <: Rotating\n\nA supertype for all barycentric-rotating coordinate frames in space.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#GeneralAstrodynamics.CoordinateFrames.BodycentricInertial","page":"Docstrings","title":"GeneralAstrodynamics.CoordinateFrames.BodycentricInertial","text":"abstract type BodycentricInertial <: Inertial\n\nabstract type BodycentricInertial <: Inertial\n\nA supertype for all bodycentric-inertial coordinate frames in space.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#GeneralAstrodynamics.CoordinateFrames.BodycentricRotating","page":"Docstrings","title":"GeneralAstrodynamics.CoordinateFrames.BodycentricRotating","text":"abstract type BodycentricRotating <: Rotating\n\nabstract type BodycentricRotating <: Rotating\n\nA supertype for all bodycentric-rotating coordinate frames in space.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#GeneralAstrodynamics.CoordinateFrames.Inertial","page":"Docstrings","title":"GeneralAstrodynamics.CoordinateFrames.Inertial","text":"abstract type Inertial <: OrbitalFrame\n\nabstract type Inertial <: OrbitalFrame\n\nA supertype for all inertial coordinate frames in space.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#GeneralAstrodynamics.CoordinateFrames.OrbitalFrame","page":"Docstrings","title":"GeneralAstrodynamics.CoordinateFrames.OrbitalFrame","text":"abstract type OrbitalFrame\n\nabstract type OrbitalFrame\n\nA supertype for all coordinate frames used in space.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#GeneralAstrodynamics.CoordinateFrames.OrbitalFrameTransform","page":"Docstrings","title":"GeneralAstrodynamics.CoordinateFrames.OrbitalFrameTransform","text":"abstract type OrbitalFrameTransform\n\nabstract type OrbitalFrameTransform\n\nA supertype for all astrodynamics coordinate frame transformations.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#GeneralAstrodynamics.CoordinateFrames.Rotating","page":"Docstrings","title":"GeneralAstrodynamics.CoordinateFrames.Rotating","text":"abstract type Rotating <: OrbitalFrame\n\nabstract type Rotating <: OrbitalFrame\n\nA supertype for all rotating coordinate frames in space.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#GeneralAstrodynamics.CoordinateFrames.Transform","page":"Docstrings","title":"GeneralAstrodynamics.CoordinateFrames.Transform","text":"struct Transform{F1<:OrbitalFrame, F2<:OrbitalFrame, T1<:CoordinateTransformations.Transformation, T2<:CoordinateTransformations.Transformation} <: GeneralAstrodynamics.CoordinateFrames.OrbitalFrameTransform\n\nA generic frame transformation between two OrbitalFrame types. Converts F1 toF2.\n\ntransform_position::CoordinateTransformations.Transformation\ntransform_velocity::CoordinateTransformations.Transformation\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#GeneralAstrodynamics.CoordinateFrames.Transform-Union{Tuple{F2}, Tuple{F1}, Tuple{CoordinateTransformations.Transformation, CoordinateTransformations.Transformation, F1, F2}} where {F1<:GeneralAstrodynamics.CoordinateFrames.OrbitalFrameTransform, F2<:GeneralAstrodynamics.CoordinateFrames.OrbitalFrameTransform}","page":"Docstrings","title":"GeneralAstrodynamics.CoordinateFrames.Transform","text":"Transform(position_transform, velocity_transform, from, to)\n\n\nAn outer constructor for Transform instances.  Provide position and velocity transformations, and the initial and final reference frames via  function arguments. This is an alternate syntax for Transform{InitialFrame, FinalFrame}(position_transform, velocity_transform).\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.CoordinateFrames.isbarycentric-Union{Tuple{Type{T}}, Tuple{T}} where T<:OrbitalFrame","page":"Docstrings","title":"GeneralAstrodynamics.CoordinateFrames.isbarycentric","text":"Returns true or false to indicate whether the provided frame is barycentric.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.CoordinateFrames.isbodycentric-Union{Tuple{Type{T}}, Tuple{T}} where T<:OrbitalFrame","page":"Docstrings","title":"GeneralAstrodynamics.CoordinateFrames.isbodycentric","text":"Returns true or false to indicate whether the provided frame is bodycentric.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.CoordinateFrames.isinertial-Union{Tuple{Type{T}}, Tuple{T}} where T<:OrbitalFrame","page":"Docstrings","title":"GeneralAstrodynamics.CoordinateFrames.isinertial","text":"Returns true or false to indicate whether the provided frame is Inertial.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.CoordinateFrames.isrotating-Union{Tuple{Type{T}}, Tuple{T}} where T<:OrbitalFrame","page":"Docstrings","title":"GeneralAstrodynamics.CoordinateFrames.isrotating","text":"isrotating(_)\n\n\nisrotating(_)\n\n\nReturns true or false to indicate whether the provided frame is Rotating.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Calculations","page":"Docstrings","title":"Calculations","text":"","category":"section"},{"location":"docstrings/","page":"Docstrings","title":"Docstrings","text":"Modules = [\n    GeneralAstrodynamics.Calculations\n]\nOrder = [:type, :function]","category":"page"},{"location":"docstrings/#GeneralAstrodynamics.Calculations.Circular","page":"Docstrings","title":"GeneralAstrodynamics.Calculations.Circular","text":"abstract type Circular <: GeneralAstrodynamics.Calculations.ConicSection\n\nAn abstract type representing the Circular  conic section.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#GeneralAstrodynamics.Calculations.ConicSection","page":"Docstrings","title":"GeneralAstrodynamics.Calculations.ConicSection","text":"abstract type ConicSection\n\nAn abstract type for all conic sections.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#GeneralAstrodynamics.Calculations.Elliptical","page":"Docstrings","title":"GeneralAstrodynamics.Calculations.Elliptical","text":"abstract type Elliptical <: GeneralAstrodynamics.Calculations.ConicSection\n\nAn abstract type representing the Elliptical  conic section.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#GeneralAstrodynamics.Calculations.Hyperbolic","page":"Docstrings","title":"GeneralAstrodynamics.Calculations.Hyperbolic","text":"abstract type Hyperbolic <: GeneralAstrodynamics.Calculations.ConicSection\n\nAn abstract type representing the Hyperbolic  conic section.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#GeneralAstrodynamics.Calculations.Parabolic","page":"Docstrings","title":"GeneralAstrodynamics.Calculations.Parabolic","text":"abstract type Parabolic <: GeneralAstrodynamics.Calculations.ConicSection\n\nAn abstract type representing the Parabolic  conic section.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#GeneralAstrodynamics.Calculations.C3-Tuple{Any, Any, Any}","page":"Docstrings","title":"GeneralAstrodynamics.Calculations.C3","text":"C3(r, v, Î¼)\n\n\nReturns C3 value.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.Calculations.LancasterBlanchard-Tuple{Any, Any, Any}","page":"Docstrings","title":"GeneralAstrodynamics.Calculations.LancasterBlanchard","text":"LancasterBlanchard(x, q, m)\n\n\nThe following code was converted to Julia, from a GitHub repository that hosts the MATLAB implementation. At the time of writing, the respository has a BSD license. I'm providing the copyright notice here, as instructed by the license text.\n\nCopyright (c) 2018, Rody Oldenhuis\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nThe views and conclusions contained in the software and documentation are those\nof the authors and should not be interpreted as representing official policies,\neither expressed or implied, of this project.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.Calculations.SOA-Tuple{Any, Any, Any}","page":"Docstrings","title":"GeneralAstrodynamics.Calculations.SOA","text":"SOA(a, m, M)\n\n\nSphere of activity.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.Calculations.SOI-Tuple{Any, Any, Any}","page":"Docstrings","title":"GeneralAstrodynamics.Calculations.SOI","text":"SOI(a, m, M)\n\n\nSphere of influence.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.Calculations.analyticalhalo-Tuple{Any}","page":"Docstrings","title":"GeneralAstrodynamics.Calculations.analyticalhalo","text":"analyticalhalo(Î¼; Az, Ï, steps, L, hemisphere)\n\n\nReturns an analytical solution for a Halo orbit about L.\n\nArguments: \n\nÎ¼: Non-dimensional mass parameter for the CR3BP system.\nAz: Desired non-dimensional Z-amplitude for Halo orbit.\nÏ: Desired Halo orbit phase.\nsteps: Number of non-dimensional timepoints in returned state.\nL: Lagrange point to orbit (L1 or L2).\nhemisphere: Specifies northern or southern Halo orbit.\n\nOutputs:\n\nSynodic position vector r::Array{<:AbstractFloat}\nSynodic velocity vector v::Array{<:Abstractfloat}.\nHalo orbit period Î¤.\nThrows ArgumentError if L is not 1 or 2.\n\nReferences:\n\nRund, 2018.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.Calculations.apoapsis_radius-Tuple{Any, Any}","page":"Docstrings","title":"GeneralAstrodynamics.Calculations.apoapsis_radius","text":"apoapsis_radius(a, e)\n\n\nReturns apoapsis distance, râ.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.Calculations.cartesian-NTuple{7, Any}","page":"Docstrings","title":"GeneralAstrodynamics.Calculations.cartesian","text":"cartesian(e, a, i, Î©, Ï, Î½, Î¼)\n\n\nReturns a Cartesian representation of a Keplerian two-body orbital state in an inertial frame, centered at the center of mass of the central body. Algorithm taught in ENAE601.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.Calculations.conic-Tuple{T} where T<:Real","page":"Docstrings","title":"GeneralAstrodynamics.Calculations.conic","text":"conic(e)\n\n\nReturns the conic section, as specified by eccentricity e.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.Calculations.distance-Tuple{Any, Any, Any}","page":"Docstrings","title":"GeneralAstrodynamics.Calculations.distance","text":"distance(p, e, Î½)\n\n\nReturns distance, r.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.Calculations.distance_to_primary-Tuple{Any, Any}","page":"Docstrings","title":"GeneralAstrodynamics.Calculations.distance_to_primary","text":"distance_to_primary(r, Î¼)\n\n\nReturns synodic distance to primary body.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.Calculations.distnace_to_secondary-Tuple{Any, Any}","page":"Docstrings","title":"GeneralAstrodynamics.Calculations.distnace_to_secondary","text":"distnace_to_secondary(r, Î¼)\n\n\nReturns synodic distance to secondary body.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.Calculations.eccentricity-Tuple{Any, Any, Any}","page":"Docstrings","title":"GeneralAstrodynamics.Calculations.eccentricity","text":"eccentricity(ráµ¢, váµ¢, Î¼)\n\n\nReturns orbital eccentricity, e.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.Calculations.eccentricity_vector-Tuple{Any, Any, Any}","page":"Docstrings","title":"GeneralAstrodynamics.Calculations.eccentricity_vector","text":"eccentricity_vector(ráµ¢, váµ¢, Î¼)\n\n\nReturns orbital eccentricity vector eÌ.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.Calculations.hohmann-Tuple{Any, Any, Any}","page":"Docstrings","title":"GeneralAstrodynamics.Calculations.hohmann","text":"hohmann(râ, râ, Î¼)\n\n\nComputes a Hohmann transfer, and returns the departure and  arrival velocity vectors. \n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.Calculations.inertial","page":"Docstrings","title":"GeneralAstrodynamics.Calculations.inertial","text":"inertial(vecâ, t)\ninertial(vecâ, t, Ï)\n\n\nGiven the Synodic frame vector, returns the vector in the barycenteric-inertial reference frame.\n\n\n\n\n\n","category":"function"},{"location":"docstrings/#GeneralAstrodynamics.Calculations.jacobi_constant-Tuple{Any, Any, Any}","page":"Docstrings","title":"GeneralAstrodynamics.Calculations.jacobi_constant","text":"jacobi_constant(r, v, Î¼)\n\n\nReturns the Jacobi Constant, C in the Synodic frame with Normalized units.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.Calculations.kepler","page":"Docstrings","title":"GeneralAstrodynamics.Calculations.kepler","text":"kepler(r, v, Î¼)\nkepler(r, v, Î¼, Ît; tol, max_iter)\n\n\nSolves Kepler's Problem for orbit and Îtáµ¢.\n\n\n\n\n\n","category":"function"},{"location":"docstrings/#GeneralAstrodynamics.Calculations.keplerian-Tuple{Any, Any, Any}","page":"Docstrings","title":"GeneralAstrodynamics.Calculations.keplerian","text":"keplerian(ráµ¢, váµ¢, Î¼)\n\n\nReturns a Keplarian representation of a Cartesian orbital state. Algorithm taught in ENAE601.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.Calculations.lagrange","page":"Docstrings","title":"GeneralAstrodynamics.Calculations.lagrange","text":"lagrange(Î¼)\nlagrange(Î¼, L)\n\n\nReturns the lagrange points for a CR3BP system.\n\nArguments: \n\nÎ¼: Non-dimensional mass parameter for the CR3BP system.\nL: Langrange points requested, must be in range [1,5]\n\nOutputs:\n\nTuple of Lagrange points\nThrows ArgumentError if L is out of range [1,5]\n\nReferences:\n\nRund, 2018\n\n\n\n\n\n","category":"function"},{"location":"docstrings/#GeneralAstrodynamics.Calculations.lambert-NTuple{5, Any}","page":"Docstrings","title":"GeneralAstrodynamics.Calculations.lambert","text":"lambert(r1vec, r2vec, tf, m, muC)\n\n\nThe following code was converted to Julia, from a GitHub repository that hosts a MATLAB implementation. At the time of writing, this respository has a BSD license. I'm providing the copyright notice here, as instructed by the license text.\n\nCopyright (c) 2018, Rody Oldenhuis\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nThe views and conclusions contained in the software and documentation are those\nof the authors and should not be interpreted as representing official policies,\neither expressed or implied, of this project.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.Calculations.lambert-Tuple{AbstractVector{<:Union{Unitful.Quantity{T, ð, U}, Unitful.Level{L, S, Unitful.Quantity{T, ð, U}} where {L, S}} where {T, U}}, AbstractVector{<:Union{Unitful.Quantity{T, ð, U}, Unitful.Level{L, S, Unitful.Quantity{T, ð, U}} where {L, S}} where {T, U}}, Union{Unitful.Quantity{T, ð, U}, Unitful.Level{L, S, Unitful.Quantity{T, ð, U}} where {L, S}} where {T, U}, Integer, Union{Unitful.Quantity{T, ð^3 ð^-2, U}, Unitful.Level{L, S, Unitful.Quantity{T, ð^3 ð^-2, U}} where {L, S}} where {T, U}}","page":"Docstrings","title":"GeneralAstrodynamics.Calculations.lambert","text":"lambert(r1, r2, tf, m, mu)\n\n\nWrapper for Unitful inputs.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.Calculations.lambert_lancaster_blanchard-Tuple{AbstractVector, AbstractVector, Number, Number}","page":"Docstrings","title":"GeneralAstrodynamics.Calculations.lambert_lancaster_blanchard","text":"lambert_lancaster_blanchard(rÌ²â, rÌ²â, Î¼, Ît; revolutions, branch, trajectory, tolerance, max_iter, output_extrema)\n\n\nThe following code was converted to Julia, from a GitHub repository that hosts a MATLAB implementation. At the time of writing, this respository has a BSD license. I'm providing the copyright notice here, as instructed by the license text.\n\nCopyright (c) 2018, Rody Oldenhuis\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nThe views and conclusions contained in the software and documentation are those\nof the authors and should not be interpreted as representing official policies,\neither expressed or implied, of this project.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.Calculations.lambert_universal-Tuple{AbstractVector, AbstractVector, Number, Number}","page":"Docstrings","title":"GeneralAstrodynamics.Calculations.lambert_universal","text":"lambert_universal(rÌâ, rÌâ, Î¼, Ît; trajectory, tolerance, max_iter)\n\n\nSolves Lambert's problem through the use of univeral variables.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.Calculations.mean_motion-Tuple{Any, Any}","page":"Docstrings","title":"GeneralAstrodynamics.Calculations.mean_motion","text":"mean_motion(a, Î¼)\n\n\nReturns mean motion, n.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.Calculations.minmax_distances-NTuple{10, Any}","page":"Docstrings","title":"GeneralAstrodynamics.Calculations.minmax_distances","text":"minmax_distances(rÌ²â, rÌ²â, râ, râ, Î´â, a, vÌ²â, vÌ²â, m, Î¼)\n\n\nThe following code was converted to Julia, from a GitHub repository that hosts a MATLAB implementation. At the time of writing, this respository has a BSD license. I'm providing the copyright notice here, as instructed by the license text.\n\nCopyright (c) 2018, Rody Oldenhuis\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nThe views and conclusions contained in the software and documentation are those\nof the authors and should not be interpreted as representing official policies,\neither expressed or implied, of this project.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.Calculations.nondimensional_radius-Tuple{Any, Any}","page":"Docstrings","title":"GeneralAstrodynamics.Calculations.nondimensional_radius","text":"nondimensional_radius(r, xáµ¢)\n\n\nReturns the spacecraft's nondimensional position w.r.t. body 1 (or 2).\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.Calculations.periapsis_radius-Tuple{Any, Any}","page":"Docstrings","title":"GeneralAstrodynamics.Calculations.periapsis_radius","text":"periapsis_radius(a, e)\n\n\nReturns periapsis distance, râ.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.Calculations.perifocal-NTuple{4, Any}","page":"Docstrings","title":"GeneralAstrodynamics.Calculations.perifocal","text":"perifocal(a, e, Î½, Î¼)\n\n\nReturns position and velocity vectors in the Perifocal frame.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.Calculations.period-Tuple{Any, Any}","page":"Docstrings","title":"GeneralAstrodynamics.Calculations.period","text":"period(a, Î¼)\n\n\nReturns the orbital period.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.Calculations.potential_energy-Tuple{Any, Any}","page":"Docstrings","title":"GeneralAstrodynamics.Calculations.potential_energy","text":"potential_energy(r, Î¼)\n\n\nReturns the potential energy U in the Synodic frame with Normalized units.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.Calculations.primary_position-Tuple{Any}","page":"Docstrings","title":"GeneralAstrodynamics.Calculations.primary_position","text":"primary_position(Î¼)\n\n\nPosition of primary body.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.Calculations.redimension-Tuple{AbstractVector{<:Real}, AbstractVector{<:Real}, Real, Real, Number, Number}","page":"Docstrings","title":"GeneralAstrodynamics.Calculations.redimension","text":"redimension(râ, vâ, tâ, Î¼â, DU, TU)\n\n\nRedimensionalizes a CR3BP orbit in the rotating reference frame.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.Calculations.secondary_position-Tuple{Any}","page":"Docstrings","title":"GeneralAstrodynamics.Calculations.secondary_position","text":"secondary_position(Î¼)\n\n\nPosition of primary body.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.Calculations.semi_parameter-Tuple{Any, Any}","page":"Docstrings","title":"GeneralAstrodynamics.Calculations.semi_parameter","text":"semi_parameter(a, e)\n\n\nReturns semilatus parameter, p.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.Calculations.semimajor_axis-Tuple{Any, Any, Any}","page":"Docstrings","title":"GeneralAstrodynamics.Calculations.semimajor_axis","text":"semimajor_axis(r, v, Î¼)\n\n\nReturns semimajor axis parameter, a.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.Calculations.spatial-NTuple{5, Any}","page":"Docstrings","title":"GeneralAstrodynamics.Calculations.spatial","text":"spatial(i, Î©, Ï, râ, vâ)\n\n\nReturns a spatial representation of the provied Perifocal state.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.Calculations.specific_angular_momentum-Tuple{Any, Any}","page":"Docstrings","title":"GeneralAstrodynamics.Calculations.specific_angular_momentum","text":"specific_angular_momentum(ráµ¢, váµ¢)\n\n\nReturns scalar specific angular momentum vector, h.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.Calculations.specific_angular_momentum_vector-Tuple{Any, Any}","page":"Docstrings","title":"GeneralAstrodynamics.Calculations.specific_angular_momentum_vector","text":"specific_angular_momentum_vector(ráµ¢, váµ¢)\n\n\nReturns specific angular momentum vector, hÌ.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.Calculations.specific_energy-Tuple{Any, Any}","page":"Docstrings","title":"GeneralAstrodynamics.Calculations.specific_energy","text":"specific_energy(a, Î¼)\n\n\nReturns specific orbital energy, Ïµ.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.Calculations.specific_potential_energy-Tuple{Any, Any}","page":"Docstrings","title":"GeneralAstrodynamics.Calculations.specific_potential_energy","text":"specific_potential_energy(r, Î¼)\n\n\nReturns potential energy for an orbit about a RestrictedTwoBodySystem.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.Calculations.speed-NTuple{5, Any}","page":"Docstrings","title":"GeneralAstrodynamics.Calculations.speed","text":"speed(p, e, Î½, a, Î¼)\n\n\nReturns the instantaneous velocity, v, for any orbital representation.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.Calculations.speed-Tuple{Any, Any, Any}","page":"Docstrings","title":"GeneralAstrodynamics.Calculations.speed","text":"speed(r, a, Î¼)\n\n\nReturns instantaneous velocity, v, for any orbital representation.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.Calculations.synodic-Tuple{AbstractVector, Any}","page":"Docstrings","title":"GeneralAstrodynamics.Calculations.synodic","text":"synodic(state, t)\n\n\nGiven an InertialCartesianState, returns the state in the synodic (rotating) reference frame.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.Calculations.time_since_periapsis-Tuple{Any, Any, Any}","page":"Docstrings","title":"GeneralAstrodynamics.Calculations.time_since_periapsis","text":"time_since_periapsis(n, e, E)\n\n\nReturns time since periapsis, t.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.Calculations.true_anomoly-NTuple{4, Any}","page":"Docstrings","title":"GeneralAstrodynamics.Calculations.true_anomoly","text":"true_anomoly(r, h, e, Î¼)\n\n\nReturns true anomoly, Î½.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.Calculations.v_infinity-Tuple{Any, Any, Any}","page":"Docstrings","title":"GeneralAstrodynamics.Calculations.v_infinity","text":"v_infinity(r, v, Î¼)\n\n\nReturns vâ.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.Calculations.zerovelocity_curves-Tuple{AbstractVector, AbstractVector, Real}","page":"Docstrings","title":"GeneralAstrodynamics.Calculations.zerovelocity_curves","text":"zerovelocity_curves(r, v, Î¼; nondimensional_range)\n\n\nReturns a Vector of Matrix values. Each Matrix contains a 3-column nondimensional position trajectory in the Synodic frame which represents a Zero Velocity Curve.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.Calculations.Ïmax-Tuple{Any}","page":"Docstrings","title":"GeneralAstrodynamics.Calculations.Ïmax","text":"Ïmax(y)\n\n\nThe following code was converted to Julia, from a GitHub repository that hosts a MATLAB implementation. At the time of writing, this respository has a BSD license. I'm providing the copyright notice here, as instructed by the license text.\n\nCopyright (c) 2018, Rody Oldenhuis\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nThe views and conclusions contained in the software and documentation are those\nof the authors and should not be interpreted as representing official policies,\neither expressed or implied, of this project.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#LinearAlgebra.normalize-Tuple{AbstractVector{<:Number}, AbstractVector{<:Number}, Number, Number, Tuple{Number, Number}}","page":"Docstrings","title":"LinearAlgebra.normalize","text":"normalize(r, v, t, a, Î¼s; lengthunit, timeunit)\n\n\nNormalizes a CR3BP orbit in the rotating reference frame.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#States","page":"Docstrings","title":"States","text":"","category":"section"},{"location":"docstrings/","page":"Docstrings","title":"Docstrings","text":"Modules = [\n    GeneralAstrodynamics.States\n]\nOrder = [:type, :function]","category":"page"},{"location":"docstrings/#GeneralAstrodynamics.States.AbstractOrbit","page":"Docstrings","title":"GeneralAstrodynamics.States.AbstractOrbit","text":"A supertype for all single-point orbit descriptions. Parameterized by coordinate frame, floating point type, mass unit, lenth unit, time unit, epoch type, state type, and parameter type (in order).\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#GeneralAstrodynamics.States.AbstractState","page":"Docstrings","title":"GeneralAstrodynamics.States.AbstractState","text":"A supertype for all states in astrodynamics.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#GeneralAstrodynamics.States.CR3BPOrbit","page":"Docstrings","title":"GeneralAstrodynamics.States.CR3BPOrbit","text":"struct Orbit{FR, F, MU, LU, TU, AU, E, var\"#s234\"<:(Union{var\"#s234\", var\"#s233\"} where {var\"#s234\"<:CartesianState, var\"#s233\"<:CartesianStateWithSTM}), var\"#s233\"<:CR3BPParameters} <: GeneralAstrodynamics.States.AbstractOrbit{FR, F, MU, LU, TU, AU, E, var\"#s234\"<:(Union{var\"#s234\", var\"#s233\"} where {var\"#s234\"<:CartesianState, var\"#s233\"<:CartesianStateWithSTM}), var\"#s233\"<:CR3BPParameters}\n\nAn alias for Orbit instances about CR3BP systems.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#GeneralAstrodynamics.States.CR3BPParameters","page":"Docstrings","title":"GeneralAstrodynamics.States.CR3BPParameters","text":"All parameters required for the Circular Restricted Three-body Problem.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#GeneralAstrodynamics.States.CartesianOrbit","page":"Docstrings","title":"GeneralAstrodynamics.States.CartesianOrbit","text":"struct Orbit{FR, F, MU, LU, TU, AU, E, var\"#s234\"<:(Union{var\"#s234\", var\"#s233\"} where {var\"#s234\"<:CartesianState, var\"#s233\"<:CartesianStateWithSTM}), var\"#s233\"<:GeneralAstrodynamics.States.ParameterVector} <: GeneralAstrodynamics.States.AbstractOrbit{FR, F, MU, LU, TU, AU, E, var\"#s234\"<:(Union{var\"#s234\", var\"#s233\"} where {var\"#s234\"<:CartesianState, var\"#s233\"<:CartesianStateWithSTM}), var\"#s233\"<:GeneralAstrodynamics.States.ParameterVector}\n\nAn alias for Orbit instances about any systems with CartesianState descriptions.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#GeneralAstrodynamics.States.CartesianOrbitWithSTM","page":"Docstrings","title":"GeneralAstrodynamics.States.CartesianOrbitWithSTM","text":"struct Orbit{FR, F, MU, LU, TU, AU, E, var\"#s234\"<:CartesianStateWithSTM, var\"#s233\"<:GeneralAstrodynamics.States.ParameterVector} <: GeneralAstrodynamics.States.AbstractOrbit{FR, F, MU, LU, TU, AU, E, var\"#s234\"<:CartesianStateWithSTM, var\"#s233\"<:GeneralAstrodynamics.States.ParameterVector}\n\nAn alias for Orbit instances about any systems with CartesianStateWithSTM descriptions.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#GeneralAstrodynamics.States.CartesianR2BPOrbit","page":"Docstrings","title":"GeneralAstrodynamics.States.CartesianR2BPOrbit","text":"struct Orbit{FR, F, MU, LU, TU, AU, E, var\"#s234\"<:(Union{var\"#s234\", var\"#s233\"} where {var\"#s234\"<:CartesianState, var\"#s233\"<:CartesianStateWithSTM}), var\"#s233\"<:R2BPParameters} <: GeneralAstrodynamics.States.AbstractOrbit{FR, F, MU, LU, TU, AU, E, var\"#s234\"<:(Union{var\"#s234\", var\"#s233\"} where {var\"#s234\"<:CartesianState, var\"#s233\"<:CartesianStateWithSTM}), var\"#s233\"<:R2BPParameters}\n\nAn alias for Orbit instances about R2BP systems with CartesianState descriptions.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#GeneralAstrodynamics.States.CartesianState","page":"Docstrings","title":"GeneralAstrodynamics.States.CartesianState","text":"A Cartesian state vector with length 6. Internally uses MVector and LVector to store data. Data is accessible via labels, which are x, y, z, áº, áº, Å¼, r, v, where r  access x,y,z and v accesses áº, áº, Å¼.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#GeneralAstrodynamics.States.CartesianState-Tuple{AbstractArray, AbstractArray}","page":"Docstrings","title":"GeneralAstrodynamics.States.CartesianState","text":"Constructs a CartesianState from provided position and velocity vectors.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.CartesianState-Tuple{Any}","page":"Docstrings","title":"GeneralAstrodynamics.States.CartesianState","text":"Constructs a CartesianState.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.CartesianState-Tuple{CartesianStateWithSTM}","page":"Docstrings","title":"GeneralAstrodynamics.States.CartesianState","text":"Returns a CartesianState, given a CartesianStateWithSTM.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.CartesianStateWithSTM","page":"Docstrings","title":"GeneralAstrodynamics.States.CartesianStateWithSTM","text":"Returns a CartesianStateWithSTM, given a CartesianState.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#GeneralAstrodynamics.States.CartesianStateWithSTM-2","page":"Docstrings","title":"GeneralAstrodynamics.States.CartesianStateWithSTM","text":"A Cartesian state vector with local linearization and length 42. Internally uses MVector and LVector to store data. Data is accessible via labels, which are x, y, z, áº, áº, Å¼, r, v, where r  access x,y,z and v accesses áº, áº, Å¼.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#GeneralAstrodynamics.States.CartesianStateWithSTM-Tuple{Any}","page":"Docstrings","title":"GeneralAstrodynamics.States.CartesianStateWithSTM","text":"Outer constructor for CartesianStateWithSTM.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.KeplerianR2BPOrbit","page":"Docstrings","title":"GeneralAstrodynamics.States.KeplerianR2BPOrbit","text":"struct Orbit{FR, F, MU, LU, TU, AU, E, var\"#s234\"<:KeplerianState, var\"#s233\"<:R2BPParameters} <: GeneralAstrodynamics.States.AbstractOrbit{FR, F, MU, LU, TU, AU, E, var\"#s234\"<:KeplerianState, var\"#s233\"<:R2BPParameters}\n\nAn alias for Orbit instances about R2BP systems with KeplerianState descriptions.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#GeneralAstrodynamics.States.KeplerianState","page":"Docstrings","title":"GeneralAstrodynamics.States.KeplerianState","text":"A Keplerian state vector with length 6. Internally uses MVector and LVector to store data. Data is accessible via labels, which are e, a, i, Î©, Ï, Î½.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#GeneralAstrodynamics.States.KeplerianState-Tuple{Real, Any, Any, Any, Any, Any}","page":"Docstrings","title":"GeneralAstrodynamics.States.KeplerianState","text":"Constructs a KeplerianState from provided position and velocity vectors.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.KeplerianState-Union{Tuple{AbstractVector{<:Real}}, Tuple{AU}, Tuple{TU}, Tuple{LU}, Tuple{F}} where {F, LU, TU, AU}","page":"Docstrings","title":"GeneralAstrodynamics.States.KeplerianState","text":"Constructs a KeplerianState from any AbstractVector.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.Orbit","page":"Docstrings","title":"GeneralAstrodynamics.States.Orbit","text":"Outer constructor for Orbits.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#GeneralAstrodynamics.States.Orbit-2","page":"Docstrings","title":"GeneralAstrodynamics.States.Orbit","text":"An orbit, described by a StateVector, with parameters described by a ParameterVector.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#GeneralAstrodynamics.States.ParameterVector","page":"Docstrings","title":"GeneralAstrodynamics.States.ParameterVector","text":"A supertype for parameter representations in astrodynamics.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#GeneralAstrodynamics.States.ParameterizedLabelledArray","page":"Docstrings","title":"GeneralAstrodynamics.States.ParameterizedLabelledArray","text":"abstract type ParameterizedLabelledArray{F, N, T, L} <: DenseArray{F, N}\n\nA supertype for types that function like  LabelledArray.LArray or LabelledArray.SLArray  instances, but are under a new type tree. This is used in GeneralAstrodynamics for parameterizing  astrodynamics state vectors by physical units.\n\nnote: Note\nAll subtypes must have only one field: a LabelledArrays.LArray or LabelledArrays.SLArray field called __rawdata. All methods on this abstract type require this field to be called __rawdata!\n\nNearly all code which acts on this type is copied  and / or modified from LabelledArrays.jl source code. All credit goes to LabelledArrays.jl developers.  The LabelledArrays.jl LICENSE file is provided  in this docstring under Julia's Extended Help docstring section.\n\nExtended help\n\nLabelledArrays.jl License\n\nThe LabelledArrays.jl package is licensed under the MIT \"Expat\" License:\n\nCopyright (c) 2017: Christopher Rackauckas.Permission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the \"Software\"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#GeneralAstrodynamics.States.R2BPOrbit","page":"Docstrings","title":"GeneralAstrodynamics.States.R2BPOrbit","text":"struct Orbit{FR, F, MU, LU, TU, AU, E, S<:Union{KeplerianState, Union{var\"#s234\", var\"#s233\"} where {var\"#s234\"<:CartesianState, var\"#s233\"<:CartesianStateWithSTM}}, P<:R2BPParameters} <: GeneralAstrodynamics.States.AbstractOrbit{FR, F, MU, LU, TU, AU, E, S<:Union{KeplerianState, Union{var\"#s234\", var\"#s233\"} where {var\"#s234\"<:CartesianState, var\"#s233\"<:CartesianStateWithSTM}}, P<:R2BPParameters}\n\nAn alias for Orbit instances about R2BP systems.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#GeneralAstrodynamics.States.R2BPParameters","page":"Docstrings","title":"GeneralAstrodynamics.States.R2BPParameters","text":"All parameters required for the Restricted Two-body Problem.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#GeneralAstrodynamics.States.StateVector","page":"Docstrings","title":"GeneralAstrodynamics.States.StateVector","text":"A supertype for all state representations in astrodynamics.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#GeneralAstrodynamics.States.StateVectorWithSTM","page":"Docstrings","title":"GeneralAstrodynamics.States.StateVectorWithSTM","text":"A supertype for all state representations with local linearizations in astrodynamics.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#ArrayInterfaceCore.restructure-Union{Tuple{F2}, Tuple{F1}, Tuple{GeneralAstrodynamics.States.ParameterizedLabelledArray{F1}, GeneralAstrodynamics.States.ParameterizedLabelledArray{F2}}} where {F1, F2}","page":"Docstrings","title":"ArrayInterfaceCore.restructure","text":"restructure(x, y)\n\n\nrestructure(x, y)\n\n\nReshapes a ParameterizedLabelledArray.\n\nThis source code which provides this functionality was copied directly from LabelledArrays.jl source code. The LabelledArrays.jl license text is provided in Julia's Extended Help section (accessible via @doc, or ?? in Julia's REPL).\n\nExtended Help\n\nLabelledArrays.jl License\n\nThe LabelledArrays.jl package is licensed under the MIT \"Expat\" License:\n\nCopyright (c) 2017: Christopher Rackauckas.Permission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the \"Software\"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.convert-Tuple{Type{<:Array}, GeneralAstrodynamics.States.ParameterizedLabelledArray}","page":"Docstrings","title":"Base.convert","text":"convert(_, x)\n\n\nconvert(_, x)\n\n\nConverts the underlying floating point type for a ParameterizedLabelledArray.\n\nThis source code which provides this functionality was copied directly from LabelledArrays.jl source code. The LabelledArrays.jl license text is provided in Julia's Extended Help section (accessible via @doc, or ?? in Julia's REPL).\n\nExtended Help\n\nLabelledArrays.jl License\n\nThe LabelledArrays.jl package is licensed under the MIT \"Expat\" License:\n\nCopyright (c) 2017: Christopher Rackauckas.Permission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the \"Software\"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.convert-Union{Tuple{AU}, Tuple{TU}, Tuple{LU}, Tuple{F}, Tuple{Type{CartesianState{F, LU, TU, AU}}, CartesianState}} where {F, LU, TU, AU}","page":"Docstrings","title":"Base.convert","text":"convert(_, state)\n\n\nConverts types and units for a CartesianState.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.convert-Union{Tuple{AU}, Tuple{TU}, Tuple{LU}, Tuple{F}, Tuple{Type{KeplerianState{F, LU, TU, AU}}, KeplerianState}} where {F, LU, TU, AU}","page":"Docstrings","title":"Base.convert","text":"convert(_, state)\n\n\nConverts types and units for a CartesianState.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.convert-Union{Tuple{AU}, Tuple{TU}, Tuple{LU}, Tuple{MU}, Tuple{F}, Tuple{Type{CR3BPParameters{F, MU, LU, TU, AU}}, CR3BPParameters}} where {F, MU, LU, TU, AU}","page":"Docstrings","title":"Base.convert","text":"convert(_, system)\n\n\nConverts types and units for a CR3BPParameters.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.convert-Union{Tuple{AU}, Tuple{TU}, Tuple{LU}, Tuple{MU}, Tuple{F}, Tuple{Type{R2BPParameters{F, MU, LU, TU, AU}}, R2BPParameters}} where {F, MU, LU, TU, AU}","page":"Docstrings","title":"Base.convert","text":"convert(_, system)\n\n\nConverts types and units for a R2BPParameters.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.convert-Union{Tuple{T}, Tuple{Type{T}, Any}} where T<:GeneralAstrodynamics.States.ParameterizedLabelledArray","page":"Docstrings","title":"Base.convert","text":"convert(_, x)\n\n\nconvert(_, x)\n\n\nConverts the underlying floating point type for a ParameterizedLabelledArray.\n\nThis source code which provides this functionality was copied directly from LabelledArrays.jl source code. The LabelledArrays.jl license text is provided in Julia's Extended Help section (accessible via @doc, or ?? in Julia's REPL).\n\nExtended Help\n\nLabelledArrays.jl License\n\nThe LabelledArrays.jl package is licensed under the MIT \"Expat\" License:\n\nCopyright (c) 2017: Christopher Rackauckas.Permission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the \"Software\"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.convert-Union{Tuple{T}, Tuple{Type{T}, T}} where T<:GeneralAstrodynamics.States.ParameterizedLabelledArray","page":"Docstrings","title":"Base.convert","text":"convert(_, x)\n\n\nconvert(_, x)\n\n\nConverts the underlying floating point type for a ParameterizedLabelledArray.\n\nThis source code which provides this functionality was copied directly from LabelledArrays.jl source code. The LabelledArrays.jl license text is provided in Julia's Extended Help section (accessible via @doc, or ?? in Julia's REPL).\n\nExtended Help\n\nLabelledArrays.jl License\n\nThe LabelledArrays.jl package is licensed under the MIT \"Expat\" License:\n\nCopyright (c) 2017: Christopher Rackauckas.Permission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the \"Software\"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.copy-Tuple{GeneralAstrodynamics.States.ParameterizedLabelledArray}","page":"Docstrings","title":"Base.copy","text":"copy(x)\n\n\ncopy(x)\n\n\nShallow copies a ParameterizedLabelledArray.\n\nThis source code which provides this functionality was copied directly from LabelledArrays.jl source code. The LabelledArrays.jl license text is provided in Julia's Extended Help section (accessible via @doc, or ?? in Julia's REPL).\n\nExtended Help\n\nLabelledArrays.jl License\n\nThe LabelledArrays.jl package is licensed under the MIT \"Expat\" License:\n\nCopyright (c) 2017: Christopher Rackauckas.Permission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the \"Software\"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.copyto!-Union{Tuple{C}, Tuple{C, C}} where C<:GeneralAstrodynamics.States.ParameterizedLabelledArray","page":"Docstrings","title":"Base.copyto!","text":"copyto!(x, y)\n\n\ncopyto!(x, y)\n\n\nCopies one ParameterizedLabelledArray to another.\n\nThis source code which provides this functionality was copied directly from LabelledArrays.jl source code. The LabelledArrays.jl license text is provided in Julia's Extended Help section (accessible via @doc, or ?? in Julia's REPL).\n\nExtended Help\n\nLabelledArrays.jl License\n\nThe LabelledArrays.jl package is licensed under the MIT \"Expat\" License:\n\nCopyright (c) 2017: Christopher Rackauckas.Permission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the \"Software\"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.dataids-Tuple{GeneralAstrodynamics.States.ParameterizedLabelledArray}","page":"Docstrings","title":"Base.dataids","text":"dataids(A)\n\n\ndataids(A)\n\n\nImplements dataids for a ParameterizedLabelledArray instance.\n\nThis source code which provides this functionality was copied directly from LabelledArrays.jl source code. The LabelledArrays.jl license text is provided in Julia's Extended Help section (accessible via @doc, or ?? in Julia's REPL).\n\nExtended Help\n\nLabelledArrays.jl License\n\nThe LabelledArrays.jl package is licensed under the MIT \"Expat\" License:\n\nCopyright (c) 2017: Christopher Rackauckas.Permission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the \"Software\"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.deepcopy-Tuple{GeneralAstrodynamics.States.ParameterizedLabelledArray}","page":"Docstrings","title":"Base.deepcopy","text":"deepcopy(x)\n\n\ndeepcopy(x)\n\n\nDeep copies a ParameterizedLabelledArray.\n\nThis source code which provides this functionality was copied directly from LabelledArrays.jl source code. The LabelledArrays.jl license text is provided in Julia's Extended Help section (accessible via @doc, or ?? in Julia's REPL).\n\nExtended Help\n\nLabelledArrays.jl License\n\nThe LabelledArrays.jl package is licensed under the MIT \"Expat\" License:\n\nCopyright (c) 2017: Christopher Rackauckas.Permission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the \"Software\"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.elsize-Union{Tuple{GeneralAstrodynamics.States.ParameterizedLabelledArray{F}}, Tuple{F}} where F","page":"Docstrings","title":"Base.elsize","text":"Returns the memory stride for any ParameterizedLabelledArray.\n\nThis source code which provides this functionality was copied directly from LabelledArrays.jl source code. The LabelledArrays.jl license text is provided in Julia's Extended Help section (accessible via @doc, or ?? in Julia's REPL).\n\nExtended Help\n\nLabelledArrays.jl License\n\nThe LabelledArrays.jl package is licensed under the MIT \"Expat\" License:\n\nCopyright (c) 2017: Christopher Rackauckas.Permission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the \"Software\"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.getindex-Tuple{GeneralAstrodynamics.States.ParameterizedLabelledArray, Vararg{Any}}","page":"Docstrings","title":"Base.getindex","text":"getindex(state, args)\n\n\ngetindex(state, args)\n\n\nReturns the index of the ParameterizedLabelledArray.\n\nThis source code which provides this functionality was copied directly from LabelledArrays.jl source code. The LabelledArrays.jl license text is provided in Julia's Extended Help section (accessible via @doc, or ?? in Julia's REPL).\n\nExtended Help\n\nLabelledArrays.jl License\n\nThe LabelledArrays.jl package is licensed under the MIT \"Expat\" License:\n\nCopyright (c) 2017: Christopher Rackauckas.Permission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the \"Software\"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.getproperty-Tuple{GeneralAstrodynamics.States.ParameterizedLabelledArray, Symbol}","page":"Docstrings","title":"Base.getproperty","text":"getproperty(x, s)\n\n\ngetproperty(x, s)\n\n\nOverrides Base.getproperty for all ParameterizedLabelledArray instances.\n\nThis source code which provides this functionality was copied directly from LabelledArrays.jl source code. The LabelledArrays.jl license text is provided in Julia's Extended Help section (accessible via @doc, or ?? in Julia's REPL).\n\nExtended Help\n\nLabelledArrays.jl License\n\nThe LabelledArrays.jl package is licensed under the MIT \"Expat\" License:\n\nCopyright (c) 2017: Christopher Rackauckas.Permission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the \"Software\"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.length-Tuple{GeneralAstrodynamics.States.StateVectorWithSTM}","page":"Docstrings","title":"Base.length","text":"length(_)\n\n\nThe length of any StateVector is 6!\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.length-Tuple{GeneralAstrodynamics.States.StateVector}","page":"Docstrings","title":"Base.length","text":"length(_)\n\n\nThe length of any StateVector is 6!\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.length-Union{Tuple{GeneralAstrodynamics.States.ParameterVector{F, MU, LU, TU, AU, N}}, Tuple{N}, Tuple{AU}, Tuple{TU}, Tuple{LU}, Tuple{MU}, Tuple{F}} where {F, MU, LU, TU, AU, N}","page":"Docstrings","title":"Base.length","text":"Returns the length of the parameter vector.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.propertynames-Union{Tuple{GeneralAstrodynamics.States.ParameterizedLabelledArray{F, N, T}}, Tuple{T}, Tuple{N}, Tuple{F}} where {F, N, T}","page":"Docstrings","title":"Base.propertynames","text":"Returns dot-accessible property names for a ParameterizedLabelledArray.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.setindex!-Tuple{GeneralAstrodynamics.States.ParameterizedLabelledArray, Vararg{Any}}","page":"Docstrings","title":"Base.setindex!","text":"setindex!(state, args)\n\n\nsetindex!(state, args)\n\n\nSets the index of the ParameterizedLabelledArray.\n\nThis source code which provides this functionality was copied directly from LabelledArrays.jl source code. The LabelledArrays.jl license text is provided in Julia's Extended Help section (accessible via @doc, or ?? in Julia's REPL).\n\nExtended Help\n\nLabelledArrays.jl License\n\nThe LabelledArrays.jl package is licensed under the MIT \"Expat\" License:\n\nCopyright (c) 2017: Christopher Rackauckas.Permission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the \"Software\"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.setproperty!-Tuple{GeneralAstrodynamics.States.ParameterizedLabelledArray, Symbol, Any}","page":"Docstrings","title":"Base.setproperty!","text":"setproperty!(x, s, y)\n\n\nsetproperty!(x, s, y)\n\n\nSets indices of a ParameterizedLabelledArray via label.\n\nThis source code which provides this functionality was copied directly from LabelledArrays.jl source code. The LabelledArrays.jl license text is provided in Julia's Extended Help section (accessible via @doc, or ?? in Julia's REPL).\n\nExtended Help\n\nLabelledArrays.jl License\n\nThe LabelledArrays.jl package is licensed under the MIT \"Expat\" License:\n\nCopyright (c) 2017: Christopher Rackauckas.Permission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the \"Software\"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.show-Tuple{IO, CR3BPParameters}","page":"Docstrings","title":"Base.show","text":"show(io, sys; showfloats, space)\n\n\nDisplays a CR3BPParameters instance.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.show-Tuple{IO, CartesianStateWithSTM}","page":"Docstrings","title":"Base.show","text":"show(io, state; showfloats, space)\n\n\nDisplays a CartesianStateWithSTM.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.show-Tuple{IO, CartesianState}","page":"Docstrings","title":"Base.show","text":"show(io, state; showfloats, space)\n\n\nDisplays a CartesianState.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.show-Tuple{IO, KeplerianState}","page":"Docstrings","title":"Base.show","text":"show(io, state; showfloats, space)\n\n\nDisplays a KeplerianState.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.show-Tuple{IO, Orbit}","page":"Docstrings","title":"Base.show","text":"show(io, orbit)\n\n\nShows all Orbit instances.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.show-Tuple{IO, R2BPParameters}","page":"Docstrings","title":"Base.show","text":"show(io, state; showfloats, space)\n\n\nDisplays R2BPParameters.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.similar-Union{Tuple{N}, Tuple{S}, Tuple{GeneralAstrodynamics.States.ParameterizedLabelledArray, Type{S}, Tuple{Vararg{Int64, N}}}} where {S, N}","page":"Docstrings","title":"Base.similar","text":"similar(x, _, dims)\n\n\nsimilar(x, _, dims)\n\n\nOverrides similar for ParameterizedLabelledArray instances.\n\nThis source code which provides this functionality was copied directly from LabelledArrays.jl source code. The LabelledArrays.jl license text is provided in Julia's Extended Help section (accessible via @doc, or ?? in Julia's REPL).\n\nExtended Help\n\nLabelledArrays.jl License\n\nThe LabelledArrays.jl package is licensed under the MIT \"Expat\" License:\n\nCopyright (c) 2017: Christopher Rackauckas.Permission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the \"Software\"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.size-Tuple{GeneralAstrodynamics.States.StateVectorWithSTM}","page":"Docstrings","title":"Base.size","text":"size(_)\n\n\nThe size of any StateVector is (6,)!\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.size-Tuple{GeneralAstrodynamics.States.StateVector}","page":"Docstrings","title":"Base.size","text":"size(_)\n\n\nThe size of any StateVector is (6,)!\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.size-Union{Tuple{GeneralAstrodynamics.States.ParameterVector{F, MU, LU, TU, AU, N}}, Tuple{N}, Tuple{AU}, Tuple{TU}, Tuple{LU}, Tuple{MU}, Tuple{F}} where {F, MU, LU, TU, AU, N}","page":"Docstrings","title":"Base.size","text":"Returns the size of the parameter vector.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.unsafe_convert-Union{Tuple{F}, Tuple{T}, Tuple{Type{Ptr{T}}, GeneralAstrodynamics.States.ParameterizedLabelledArray{F}}} where {T, F}","page":"Docstrings","title":"Base.unsafe_convert","text":"unsafe_convert(_, a)\n\n\nunsafe_convert(_, a)\n\n\nProvides unsafe_convert for ParameterizedLabelledArray types for use with LAPACK.\n\nThis source code which provides this functionality was copied directly from LabelledArrays.jl source code. The LabelledArrays.jl license text is provided in Julia's Extended Help section (accessible via @doc, or ?? in Julia's REPL).\n\nExtended Help\n\nLabelledArrays.jl License\n\nThe LabelledArrays.jl package is licensed under the MIT \"Expat\" License:\n\nCopyright (c) 2017: Christopher Rackauckas.Permission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the \"Software\"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.angularunit-Union{Tuple{GeneralAstrodynamics.States.AbstractState{F, LU, TU, AU}}, Tuple{AU}, Tuple{TU}, Tuple{LU}, Tuple{F}} where {F, LU, TU, AU}","page":"Docstrings","title":"GeneralAstrodynamics.States.angularunit","text":"Returns the angularunit of the state vector.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.angularunit-Union{Tuple{GeneralAstrodynamics.States.ParameterVector{F, MU, LU, TU, AU, N}}, Tuple{N}, Tuple{AU}, Tuple{TU}, Tuple{LU}, Tuple{MU}, Tuple{F}} where {F, MU, LU, TU, AU, N}","page":"Docstrings","title":"GeneralAstrodynamics.States.angularunit","text":"Returns the angular unit of the parameter vector.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.angularunit-Union{Tuple{Orbit{FR, F, MU, LU, TU, AU}}, Tuple{AU}, Tuple{TU}, Tuple{LU}, Tuple{MU}, Tuple{F}, Tuple{FR}} where {FR, F, MU, LU, TU, AU}","page":"Docstrings","title":"GeneralAstrodynamics.States.angularunit","text":"Returns the angularunit for an Orbit.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.defaultframe-Tuple{GeneralAstrodynamics.States.ParameterVector}","page":"Docstrings","title":"GeneralAstrodynamics.States.defaultframe","text":"defaultframe(system)\n\n\nReturns a default frame.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.epoch-Tuple{Orbit}","page":"Docstrings","title":"GeneralAstrodynamics.States.epoch","text":"epoch(orbit)\n\n\nReturns the epoch (timestamp) for the Orbit.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.frame-Union{Tuple{Orbit{FR}}, Tuple{FR}} where FR","page":"Docstrings","title":"GeneralAstrodynamics.States.frame","text":"Returns the OrbitalFrame for the Orbit.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.get_a-Tuple{KeplerianState}","page":"Docstrings","title":"GeneralAstrodynamics.States.get_a","text":"get_a(state)\n\n\nReturns a.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.get_e-Tuple{KeplerianState}","page":"Docstrings","title":"GeneralAstrodynamics.States.get_e","text":"get_e(state)\n\n\nReturns e.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.get_i-Tuple{KeplerianState}","page":"Docstrings","title":"GeneralAstrodynamics.States.get_i","text":"get_i(state)\n\n\nReturns i.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.get_r-Tuple{Union{CartesianState, CartesianStateWithSTM}}","page":"Docstrings","title":"GeneralAstrodynamics.States.get_r","text":"get_r(state)\n\n\nReturns r.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.get_stm-Tuple{CartesianStateWithSTM}","page":"Docstrings","title":"GeneralAstrodynamics.States.get_stm","text":"get_stm(state)\n\n\nReturns the state transition matrix.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.get_v-Tuple{Union{CartesianState, CartesianStateWithSTM}}","page":"Docstrings","title":"GeneralAstrodynamics.States.get_v","text":"get_v(state)\n\n\nReturns v.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.get_x-Tuple{Union{CartesianState, CartesianStateWithSTM}}","page":"Docstrings","title":"GeneralAstrodynamics.States.get_x","text":"get_x(state)\n\n\nReturns x.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.get_y-Tuple{Union{CartesianState, CartesianStateWithSTM}}","page":"Docstrings","title":"GeneralAstrodynamics.States.get_y","text":"get_y(state)\n\n\nReturns y.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.get_z-Tuple{Union{CartesianState, CartesianStateWithSTM}}","page":"Docstrings","title":"GeneralAstrodynamics.States.get_z","text":"get_z(state)\n\n\nReturns z.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.get_Å¼-Tuple{Union{CartesianState, CartesianStateWithSTM}}","page":"Docstrings","title":"GeneralAstrodynamics.States.get_Å¼","text":"get_Å¼(state)\n\n\nReturns zÌ.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.get_Î©-Tuple{KeplerianState}","page":"Docstrings","title":"GeneralAstrodynamics.States.get_Î©","text":"get_Î©(state)\n\n\nReturns Î©.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.get_Î¼-Tuple{CR3BPParameters}","page":"Docstrings","title":"GeneralAstrodynamics.States.get_Î¼","text":"get_Î¼(sys)\n\n\nReturns the normalized mass parameter, Î¼.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.get_Î¼-Tuple{R2BPParameters}","page":"Docstrings","title":"GeneralAstrodynamics.States.get_Î¼","text":"get_Î¼(sys)\n\n\nReturns the normalized mass parameter, Î¼.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.get_Î½-Tuple{KeplerianState}","page":"Docstrings","title":"GeneralAstrodynamics.States.get_Î½","text":"get_Î½(state)\n\n\nReturns Î½.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.get_Ï-Tuple{KeplerianState}","page":"Docstrings","title":"GeneralAstrodynamics.States.get_Ï","text":"get_Ï(state)\n\n\nReturns `Ï.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.get_Ï-Tuple{CartesianStateWithSTM}","page":"Docstrings","title":"GeneralAstrodynamics.States.get_Ï","text":"get_Ï(state)\n\n\nReturns Ï.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.get_áº-Tuple{Union{CartesianState, CartesianStateWithSTM}}","page":"Docstrings","title":"GeneralAstrodynamics.States.get_áº","text":"get_áº(state)\n\n\nReturns xÌ.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.get_áº-Tuple{Union{CartesianState, CartesianStateWithSTM}}","page":"Docstrings","title":"GeneralAstrodynamics.States.get_áº","text":"get_áº(state)\n\n\nReturns yÌ.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.isnormalized-Tuple{GeneralAstrodynamics.States.AbstractState}","page":"Docstrings","title":"GeneralAstrodynamics.States.isnormalized","text":"isnormalized(state)\n\n\nReturns true if the AbstractState has lengthunit and timeunit parameters of some type T <: AbstractQuantity. This is intended to be used for normalizing CartesianState vectors.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.lengthunit-Union{Tuple{GeneralAstrodynamics.States.AbstractState{F, LU, TU, AU}}, Tuple{AU}, Tuple{TU}, Tuple{LU}, Tuple{F}} where {F, LU, TU, AU}","page":"Docstrings","title":"GeneralAstrodynamics.States.lengthunit","text":"Returns the lengthunit of the state vector.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.lengthunit-Union{Tuple{GeneralAstrodynamics.States.ParameterVector{F, MU, LU, TU, AU, N}}, Tuple{N}, Tuple{AU}, Tuple{TU}, Tuple{LU}, Tuple{MU}, Tuple{F}} where {F, MU, LU, TU, AU, N}","page":"Docstrings","title":"GeneralAstrodynamics.States.lengthunit","text":"Returns the length unit of the parameter vector.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.lengthunit-Union{Tuple{Orbit{FR, F, MU, LU, TU, AU}}, Tuple{AU}, Tuple{TU}, Tuple{LU}, Tuple{MU}, Tuple{F}, Tuple{FR}} where {FR, F, MU, LU, TU, AU}","page":"Docstrings","title":"GeneralAstrodynamics.States.lengthunit","text":"Returns the lengthunit for an Orbit.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.massparameter-Tuple{CR3BPParameters}","page":"Docstrings","title":"GeneralAstrodynamics.States.massparameter","text":"massparameter(system)\n\n\nReturns the mass parameter of the CR3BP system.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.massparameter-Tuple{R2BPParameters}","page":"Docstrings","title":"GeneralAstrodynamics.States.massparameter","text":"massparameter(system)\n\n\nReturns the mass parameter of the R2BP system.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.massparameters-Tuple{CR3BPParameters}","page":"Docstrings","title":"GeneralAstrodynamics.States.massparameters","text":"massparameters(system)\n\n\nReturns the mass parameters of the CR3BP system.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.massparamunit-Tuple{Orbit}","page":"Docstrings","title":"GeneralAstrodynamics.States.massparamunit","text":"massparamunit(orbit)\n\n\nReturns the massparamunit for an Orbit.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.massparamunit-Union{Tuple{GeneralAstrodynamics.States.ParameterVector{F, MU, LU, TU, AU}}, Tuple{AU}, Tuple{TU}, Tuple{LU}, Tuple{MU}, Tuple{F}} where {F, MU, LU, TU, AU}","page":"Docstrings","title":"GeneralAstrodynamics.States.massparamunit","text":"massparamunit(_)\n\n\nReturns the mass-parameter unit of the state vector.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.massunit-Union{Tuple{GeneralAstrodynamics.States.ParameterVector{F, MU, LU, TU, AU, N}}, Tuple{N}, Tuple{AU}, Tuple{TU}, Tuple{LU}, Tuple{MU}, Tuple{F}} where {F, MU, LU, TU, AU, N}","page":"Docstrings","title":"GeneralAstrodynamics.States.massunit","text":"Returns the mass unit of the parameter vector.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.massunit-Union{Tuple{Orbit{FR, F, MU, LU, TU, AU}}, Tuple{AU}, Tuple{TU}, Tuple{LU}, Tuple{MU}, Tuple{F}, Tuple{FR}} where {FR, F, MU, LU, TU, AU}","page":"Docstrings","title":"GeneralAstrodynamics.States.massunit","text":"Returns the massunit for an Orbit.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.model-Tuple{CR3BPParameters}","page":"Docstrings","title":"GeneralAstrodynamics.States.model","text":"model(_)\n\n\nmodel(_)\n\n\nReturns the ModelingToolkit.ODESystem associated  with CR3BPParameters, provided by AstrodynamicalModels.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.model-Tuple{R2BPParameters}","page":"Docstrings","title":"GeneralAstrodynamics.States.model","text":"model(_)\n\n\nmodel(_)\n\n\nReturns the ModelingToolkit.ODESystem associated  with R2BPParameters, provided by AstrodynamicalModels.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.name-Union{Tuple{GeneralAstrodynamics.States.ParameterVector{F, MU, LU, TU, AU, N, T, B}}, Tuple{B}, Tuple{T}, Tuple{N}, Tuple{AU}, Tuple{TU}, Tuple{LU}, Tuple{MU}, Tuple{F}} where {F, MU, LU, TU, AU, N, T, B}","page":"Docstrings","title":"GeneralAstrodynamics.States.name","text":"Returns the name of the parameter vector.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.primary_massparameter-Tuple{CR3BPParameters}","page":"Docstrings","title":"GeneralAstrodynamics.States.primary_massparameter","text":"primary_massparameter(system)\n\n\nReturns the primary mass parameter of the CR3BP system.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.secondary_massparameter-Tuple{CR3BPParameters}","page":"Docstrings","title":"GeneralAstrodynamics.States.secondary_massparameter","text":"secondary_massparameter(system)\n\n\nReturns the secondary mass parameter of the CR3BP system.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.state-Tuple{Orbit}","page":"Docstrings","title":"GeneralAstrodynamics.States.state","text":"state(orbit)\n\n\nReturns the state vector for the Orbit.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.statevector-Tuple{CartesianStateWithSTM}","page":"Docstrings","title":"GeneralAstrodynamics.States.statevector","text":"statevector(state)\n\n\nReturns the whole state vector, without units.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.statevector-Tuple{CartesianState}","page":"Docstrings","title":"GeneralAstrodynamics.States.statevector","text":"statevector(state)\n\n\nReturns the whole state vector, without units.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.statevector-Tuple{KeplerianState}","page":"Docstrings","title":"GeneralAstrodynamics.States.statevector","text":"statevector(state)\n\n\nReturns the whole state vector, without units.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.system-Tuple{Orbit}","page":"Docstrings","title":"GeneralAstrodynamics.States.system","text":"system(orbit)\n\n\nReturns the parameter vector for the Orbit.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.timeunit-Union{Tuple{GeneralAstrodynamics.States.AbstractState{F, LU, TU, AU}}, Tuple{AU}, Tuple{TU}, Tuple{LU}, Tuple{F}} where {F, LU, TU, AU}","page":"Docstrings","title":"GeneralAstrodynamics.States.timeunit","text":"Returns the timeunit of the state vector.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.timeunit-Union{Tuple{GeneralAstrodynamics.States.ParameterVector{F, MU, LU, TU, AU, N}}, Tuple{N}, Tuple{AU}, Tuple{TU}, Tuple{LU}, Tuple{MU}, Tuple{F}} where {F, MU, LU, TU, AU, N}","page":"Docstrings","title":"GeneralAstrodynamics.States.timeunit","text":"Returns the time unit of the parameter vector.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.timeunit-Union{Tuple{Orbit{FR, F, MU, LU, TU, AU}}, Tuple{AU}, Tuple{TU}, Tuple{LU}, Tuple{MU}, Tuple{F}, Tuple{FR}} where {FR, F, MU, LU, TU, AU}","page":"Docstrings","title":"GeneralAstrodynamics.States.timeunit","text":"Returns the timeunit for an Orbit.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.vectorfield-Tuple{CR3BPParameters}","page":"Docstrings","title":"GeneralAstrodynamics.States.vectorfield","text":"vectorfield(_)\n\n\nvectorfield(_)\n\n\nReturns the DifferentialEquations.ODEFunction associated  with CR3BPParameters, provided by AstrodynamicalModels.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.vectorfield-Tuple{R2BPParameters}","page":"Docstrings","title":"GeneralAstrodynamics.States.vectorfield","text":"vectorfield(_)\n\n\nvectorfield(_)\n\n\nReturns the DifferentialEquations.ODEFunction associated  with R2BPParameters, provided by AstrodynamicalModels.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.velocityunit-Tuple{Orbit}","page":"Docstrings","title":"GeneralAstrodynamics.States.velocityunit","text":"velocityunit(orbit)\n\n\nReturns the velocityunit for an Orbit.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.velocityunit-Union{Tuple{GeneralAstrodynamics.States.AbstractState{F, LU, TU, AU}}, Tuple{AU}, Tuple{TU}, Tuple{LU}, Tuple{F}} where {F, LU, TU, AU}","page":"Docstrings","title":"GeneralAstrodynamics.States.velocityunit","text":"Returns the angularunit of the state vector.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.velocityunit-Union{Tuple{GeneralAstrodynamics.States.ParameterVector{F, MU, LU, TU, AU}}, Tuple{AU}, Tuple{TU}, Tuple{LU}, Tuple{MU}, Tuple{F}} where {F, MU, LU, TU, AU}","page":"Docstrings","title":"GeneralAstrodynamics.States.velocityunit","text":"Returns the velocity unit of the state vector.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Propagation","page":"Docstrings","title":"Propagation","text":"","category":"section"},{"location":"docstrings/","page":"Docstrings","title":"Docstrings","text":"Modules = [\n    GeneralAstrodynamics.Propagation\n]\nOrder = [:type, :function]","category":"page"},{"location":"docstrings/#GeneralAstrodynamics.Propagation.AbstractOrbitalEnsembleSolution","page":"Docstrings","title":"GeneralAstrodynamics.Propagation.AbstractOrbitalEnsembleSolution","text":"abstract type AbstractEnsembleSolution{T, N, var\"#s88\"<:AbstractArray{U<:Trajectory, 1}} <: AbstractVectorOfArray{T, N, var\"#s88\"<:AbstractArray{U<:Trajectory, 1}}\n\nAn alias for some abstract EnsembleSolution  with States state vector and parameter  vector types.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#GeneralAstrodynamics.Propagation.AbstractOrbitalODESolution","page":"Docstrings","title":"GeneralAstrodynamics.Propagation.AbstractOrbitalODESolution","text":"abstract type AbstractODESolution{T, N, var\"#s3\"<:AbstractArray{U<:GeneralAstrodynamics.States.AbstractState, 1}} <: SciMLBase.AbstractTimeseriesSolution{T, N, var\"#s3\"<:AbstractArray{U<:GeneralAstrodynamics.States.AbstractState, 1}}\n\nAn alias for some abstract ODESolution  with States state vector and parameter  vector types.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#GeneralAstrodynamics.Propagation.Manifold","page":"Docstrings","title":"GeneralAstrodynamics.Propagation.Manifold","text":"An wrapper for a SciMLBase.ODESolution with a GeneralAstrodynamics.States.AbstractState  state vector type. This represents a Manifold in space!\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#GeneralAstrodynamics.Propagation.Trajectory","page":"Docstrings","title":"GeneralAstrodynamics.Propagation.Trajectory","text":"An wrapper for a SciMLBase.ODESolution with a GeneralAstrodynamics.States.AbstractState  state vector type. This represents an object's Trajectory in space!\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#GeneralAstrodynamics.Propagation.Trajectory-Tuple{Number}","page":"Docstrings","title":"GeneralAstrodynamics.Propagation.Trajectory","text":"A wrapper for (::ODESolution-like)(args...). Returns a state  of type initialstate) at time t past epoch.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.Orbit-Tuple{Trajectory, Any}","page":"Docstrings","title":"GeneralAstrodynamics.States.Orbit","text":"Returns an Orbit at time t.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#SciMLBase.EnsembleProblem-Tuple{Orbit, Number}","page":"Docstrings","title":"SciMLBase.EnsembleProblem","text":"Returns an EnsembleProblem which represents perturbations  off of a Halo orbit onto a stable or unstable manifold. Use kwarg direction=Val{:stable} or direction=Val{:unstable} to specify whether you want to solve for the stable or unstable  invariant manifold about the provided Halo orbit. All kwargs arguments are passed directly to DifferentialEquations solvers.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#SciMLBase.EnsembleProblem-Tuple{Trajectory{FR, <:CartesianStateWithSTM} where FR}","page":"Docstrings","title":"SciMLBase.EnsembleProblem","text":"Returns an EnsembleProblem which represents perturbations  off of a Halo orbit onto a stable or unstable manifold. Use kwarg direction=Val{:stable} or direction=Val{:unstable} to specify whether you want to solve for the stable or unstable  invariant manifold about the provided Halo orbit. All kwargs arguments are passed directly to DifferentialEquations solvers.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#SciMLBase.ODEProblem-Tuple{CR3BPOrbit, Real}","page":"Docstrings","title":"SciMLBase.ODEProblem","text":"Create's an ODEProblem for a R2BP orbit.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#SciMLBase.ODEProblem-Tuple{R2BPOrbit, Number}","page":"Docstrings","title":"SciMLBase.ODEProblem","text":"Create's an ODEProblem for a R2BP orbit.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.eltype-Tuple{Trajectory}","page":"Docstrings","title":"Base.eltype","text":"eltype(traj)\n\n\nReturns the eltype of the Trajectory.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.getindex-Tuple{Manifold, Vararg{Any}}","page":"Docstrings","title":"Base.getindex","text":"getindex(man, args)\n\n\nCalls the underlying solution's getindex function to return the CartesianState of the Manifold at time t past the initialepoch.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.getindex-Tuple{Trajectory, Vararg{Any}}","page":"Docstrings","title":"Base.getindex","text":"getindex(traj, args)\n\n\nCalls the underlying solution's getindex function to return the CartesianState of the Trajectory at time t past the initialepoch.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.lastindex-Tuple{Manifold}","page":"Docstrings","title":"Base.lastindex","text":"lastindex(man)\n\n\nReturns the last index of a Manifold.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.lastindex-Tuple{Trajectory}","page":"Docstrings","title":"Base.lastindex","text":"lastindex(traj)\n\n\nReturns the last index of a Trajectory.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.length-Tuple{Manifold}","page":"Docstrings","title":"Base.length","text":"length(man)\n\n\nThe length of a Manifold.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.length-Tuple{Trajectory}","page":"Docstrings","title":"Base.length","text":"length(traj)\n\n\nThe length of a Trajectory.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.position-Tuple{Trajectory, Any}","page":"Docstrings","title":"Base.position","text":"position(traj, t)\n\n\nReturns the position of the Trajectory at t timeunit's from the initialstate's epoch.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.show-Tuple{IO, Manifold}","page":"Docstrings","title":"Base.show","text":"show(io, man)\n\n\nShow a Trajectory.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.show-Tuple{IO, Trajectory}","page":"Docstrings","title":"Base.show","text":"show(io, traj)\n\n\nShow a Trajectory.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.size-Tuple{Manifold}","page":"Docstrings","title":"Base.size","text":"size(man)\n\n\nThe size of a Manifold.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.size-Tuple{Trajectory}","page":"Docstrings","title":"Base.size","text":"size(traj)\n\n\nThe size of a Trajectory.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.Calculations.distance-Tuple{Trajectory, Any}","page":"Docstrings","title":"GeneralAstrodynamics.Calculations.distance","text":"distance(traj, t)\n\n\nReturns the scalar distance of the Trajectory at t timeunit's from the initialstate's epoch.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.Calculations.speed-Tuple{Trajectory, Any}","page":"Docstrings","title":"GeneralAstrodynamics.Calculations.speed","text":"speed(traj, t)\n\n\nReturns the scalar distance of the Trajectory at t timeunit's from the initialstate's epoch.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.Propagation.DistributedManifoldIteration-Tuple{Trajectory, AbstractVector, Real}","page":"Docstrings","title":"GeneralAstrodynamics.Propagation.DistributedManifoldIteration","text":"DistributedManifoldIteration(traj, V, dur; trajectories, verify, eps)\n\n\nDistributed perturbation for EnsembleProblem itration.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.Propagation.ManifoldIteration-Tuple{Trajectory, AbstractVector, Real}","page":"Docstrings","title":"GeneralAstrodynamics.Propagation.ManifoldIteration","text":"ManifoldIteration(traj, V, dur; trajectories, verify, eps)\n\n\nNon-distributed perturbation for EnsembleProblem itration.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.Propagation.ManifoldSolutionOutput-Tuple{Trajectory}","page":"Docstrings","title":"GeneralAstrodynamics.Propagation.ManifoldSolutionOutput","text":"ManifoldSolutionOutput(traj)\n\n\nMaps a solution iteration within an EnsembleProblem solver to a Trajectory.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.Propagation.ManifoldTrajectoryOutput-Tuple{Trajectory}","page":"Docstrings","title":"GeneralAstrodynamics.Propagation.ManifoldTrajectoryOutput","text":"ManifoldTrajectoryOutput(traj)\n\n\nMaps a solution iteration within an EnsembleProblem solver to a Trajectory.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.Propagation.UnitfulToAstroTime-Tuple{Union{Unitful.Quantity{T, ð, U}, Unitful.Level{L, S, Unitful.Quantity{T, ð, U}} where {L, S}} where {T, U}}","page":"Docstrings","title":"GeneralAstrodynamics.Propagation.UnitfulToAstroTime","text":"UnitfulToAstroTime(t)\n\n\nConverts Unitful types to AstroTime types. Throws an ArgumentError if the unit of quantity  t is not a second, minute, hour, day, or year.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.Propagation.halo","page":"Docstrings","title":"GeneralAstrodynamics.Propagation.halo","text":"halo(sys)\nhalo(sys, epoch; Az, kwargs...)\n\n\nA halo wrapper! Returns a CircularRestrictedThreeBodyOrbit. Returns a tuple: halo_orbit, halo_period.\n\n\n\n\n\n","category":"function"},{"location":"docstrings/#GeneralAstrodynamics.Propagation.halo-Tuple{Any}","page":"Docstrings","title":"GeneralAstrodynamics.Propagation.halo","text":"halo(Î¼; Az, L, hemisphere, tolerance, max_iter, reltol, abstol, nan_on_fail, disable_warnings)\n\n\nReturns a numerical solution for a Halo orbit about L.\n\nArguments: \n\nÎ¼: Non-dimensional mass parameter for the CR3BP system.\nAz: Desired non-dimensional Z-amplitude for Halo orbit.\nÏ: Desired Halo orbit phase.\nL: Lagrange point to orbit (L1 or L2).\nhemisphere: Specifies northern or southern Halo orbit.\n\nOutputs:\n\nTuple of initial states: (r, v) where r::Vector{<:AbstractFloat}, v::Vector{<:Abstractfloat}.\nThrows ArgumentError if L is not :L1 or :L2\n\nReferences:\n\nThe iterative scheme was pulled from directly from literature and sample code, including Rund 2018, and Dr. Mireles' lecture notes and EarthSunHaloOrbit_NewtonMewhod.m  file available on their website. Specifically, the half-period iterative scheme (the F matrix in the source code, and corresponding \"next guess\" computation)  was ported directly from Dr. Mireles' public code and notes, which are available online. \n\nDr. Mireles Notes\nDr. Mireles Code\nRund, 2018.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.Propagation.initialepoch-Tuple{Trajectory}","page":"Docstrings","title":"GeneralAstrodynamics.Propagation.initialepoch","text":"initialepoch(traj)\n\n\nReturns the start epoch. Typically, This is a type defined in AstroTime.Epochs.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.Propagation.initialstate-Tuple{Trajectory}","page":"Docstrings","title":"GeneralAstrodynamics.Propagation.initialstate","text":"initialstate(traj)\n\n\nReturns the initial condition associated with the Trajectory.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.Propagation.isperiodic-Tuple{CR3BPOrbit, Any}","page":"Docstrings","title":"GeneralAstrodynamics.Propagation.isperiodic","text":"isperiodic(orbit, T; reltol, abstol)\n\n\nReturns true if a RestrictedThreeBodySystem is numerically periodic.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.Propagation.manifold-Tuple{Orbit, Number}","page":"Docstrings","title":"GeneralAstrodynamics.Propagation.manifold","text":"manifold(orbit, period; duration, trajectories, kwargs...)\n\n\nPerturbs a periodic orbit's Trajectory in the direction of the stable or unstable eigenvector of its monodromy matrix to form a stable or unstable manifold.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.Propagation.manifold-Union{Tuple{Trajectory{FR, S, P, E}}, Tuple{E}, Tuple{P}, Tuple{S}, Tuple{FR}} where {FR, S<:CartesianStateWithSTM, P, E}","page":"Docstrings","title":"GeneralAstrodynamics.Propagation.manifold","text":"Perturbs a periodic orbit traj in the direction of the stable or unstable eigenvector of its monodromy matrix to form a stable or unstable manifold.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.Propagation.monodromy-Tuple{CR3BPOrbit, Any}","page":"Docstrings","title":"GeneralAstrodynamics.Propagation.monodromy","text":"monodromy(orbit, T; verify, reltol, abstol)\n\n\nReturns the Monodromy Matrix for a Halo orbit.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.Propagation.perturb-Tuple{CartesianStateWithSTM, AbstractVector}","page":"Docstrings","title":"GeneralAstrodynamics.Propagation.perturb","text":"perturb(state, V; verify, eps)\n\n\nPerturbs a CartesianStateWithSTM in the direction of an  eigenvector V.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.Propagation.perturb-Union{Tuple{S}, Tuple{FR}, Tuple{Trajectory{FR, S}, Any, AbstractVector}} where {FR, S<:CartesianStateWithSTM}","page":"Docstrings","title":"GeneralAstrodynamics.Propagation.perturb","text":"perturb(traj, t, V; eps)\n\n\nReturns an orbit perturbed in the direction of the local linearization right-multiplied  by the provided eigenvector V. Only available for Trajectory instances with  CartesianStateWithSTM state types.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.Propagation.propagate-Tuple{Orbit, Number}","page":"Docstrings","title":"GeneralAstrodynamics.Propagation.propagate","text":"propagate(orbit, Ît; algorithm, kwargs...)\n\n\nPropagates an orbit forward or backward in time. Use algorithm to set the desired numerical integration algorithm, e.g. algorithm = Tsit5(). All other kwargs  are passed directly to DifferentialEquations.solve.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.Propagation.solution-Tuple{Manifold}","page":"Docstrings","title":"GeneralAstrodynamics.Propagation.solution","text":"solution(man)\n\n\nReturns the solution for the Manifold. Typically,  this is a DifferentialEquations.ODESolution.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.Propagation.solution-Tuple{Trajectory}","page":"Docstrings","title":"GeneralAstrodynamics.Propagation.solution","text":"solution(traj)\n\n\nReturns the solution for the Trajectory. Typically,  this is a DifferentialEquations.ODESolution.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.Propagation.stable_eigenvector-Tuple{AbstractMatrix}","page":"Docstrings","title":"GeneralAstrodynamics.Propagation.stable_eigenvector","text":"stable_eigenvector(monodromy; verify)\n\n\nCalculates the eigenvector associated with the stable manifold of a Monodromy matrix.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.Propagation.unstable_eigenvector-Tuple{AbstractMatrix}","page":"Docstrings","title":"GeneralAstrodynamics.Propagation.unstable_eigenvector","text":"unstable_eigenvector(monodromy; verify)\n\n\nCalculates the eigenvector associated with the unstable manifold of a Monodromy matrix.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.angularunit-Tuple{Manifold}","page":"Docstrings","title":"GeneralAstrodynamics.States.angularunit","text":"angularunit(man)\n\n\nReturns the angular unit for the Trajectory.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.angularunit-Tuple{Trajectory}","page":"Docstrings","title":"GeneralAstrodynamics.States.angularunit","text":"angularunit(traj)\n\n\nReturns the angular unit for the Trajectory.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.epoch-Tuple{Trajectory, Any}","page":"Docstrings","title":"GeneralAstrodynamics.States.epoch","text":"epoch(traj, t)\n\n\nReturns an epoch at time t past initialepoch.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.frame-Union{Tuple{Manifold{FR}}, Tuple{FR}} where FR","page":"Docstrings","title":"GeneralAstrodynamics.States.frame","text":"Returns the OrbitalFrame of the Manifold.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.frame-Union{Tuple{Trajectory{FR}}, Tuple{FR}} where FR","page":"Docstrings","title":"GeneralAstrodynamics.States.frame","text":"Returns the OrbitalFrame of the Trajectory.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.lengthunit-Tuple{Manifold}","page":"Docstrings","title":"GeneralAstrodynamics.States.lengthunit","text":"lengthunit(man)\n\n\nReturns the length unit for the Trajectory.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.lengthunit-Tuple{Trajectory}","page":"Docstrings","title":"GeneralAstrodynamics.States.lengthunit","text":"lengthunit(traj)\n\n\nReturns the length unit for the Trajectory.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.massparamunit-Tuple{Manifold}","page":"Docstrings","title":"GeneralAstrodynamics.States.massparamunit","text":"massparamunit(man)\n\n\nReturns the mass parameter unit for the Trajectory.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.massparamunit-Tuple{Trajectory}","page":"Docstrings","title":"GeneralAstrodynamics.States.massparamunit","text":"massparamunit(traj)\n\n\nReturns the mass parameter unit for the Trajectory.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.massunit-Tuple{Manifold}","page":"Docstrings","title":"GeneralAstrodynamics.States.massunit","text":"massunit(man)\n\n\nReturns the mass unit for the Manifold.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.massunit-Tuple{Trajectory}","page":"Docstrings","title":"GeneralAstrodynamics.States.massunit","text":"massunit(traj)\n\n\nReturns the mass unit for the Trajectory.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.state-Tuple{Trajectory, Any}","page":"Docstrings","title":"GeneralAstrodynamics.States.state","text":"state(traj, t)\n\n\nReturns a state of type typeof(initialstate) at time t.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.system-Tuple{Manifold}","page":"Docstrings","title":"GeneralAstrodynamics.States.system","text":"system(man)\n\n\nReturns the system associated with the Manifold.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.system-Tuple{Trajectory}","page":"Docstrings","title":"GeneralAstrodynamics.States.system","text":"system(traj)\n\n\nReturns the system associated with the Trajectory.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.timeunit-Tuple{Manifold}","page":"Docstrings","title":"GeneralAstrodynamics.States.timeunit","text":"timeunit(man)\n\n\nReturns the time unit for the Trajectory.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.timeunit-Tuple{Trajectory}","page":"Docstrings","title":"GeneralAstrodynamics.States.timeunit","text":"timeunit(traj)\n\n\nReturns the time unit for the Trajectory.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.velocity-Tuple{Trajectory, Any}","page":"Docstrings","title":"GeneralAstrodynamics.States.velocity","text":"velocity(traj, t)\n\n\nReturns the position of the Trajectory at t timeunit's from the initialstate's epoch.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.velocityunit-Tuple{Manifold}","page":"Docstrings","title":"GeneralAstrodynamics.States.velocityunit","text":"velocityunit(man)\n\n\nReturns the velocity unit for the Trajectory.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.States.velocityunit-Tuple{Trajectory}","page":"Docstrings","title":"GeneralAstrodynamics.States.velocityunit","text":"velocityunit(traj)\n\n\nReturns the velocity unit for the Trajectory.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Visualizations","page":"Docstrings","title":"Visualizations","text":"","category":"section"},{"location":"docstrings/","page":"Docstrings","title":"Docstrings","text":"Modules = [\n    GeneralAstrodynamics.Visualizations\n]\nOrder   = [:type, :function]","category":"page"},{"location":"docstrings/#GeneralAstrodynamics.Visualizations.process_vars-Tuple{Symbol}","page":"Docstrings","title":"GeneralAstrodynamics.Visualizations.process_vars","text":"process_vars(vars)\n\n\nRather than supply indices, users can use Symbol  instances to select indices for plotting. \n\nExample\n\ntraj = propagate(orbit, period) plot(traj; vars=:tx) plot(traj; vars=xyz) plot(traj; vars=xxÌ)\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.Visualizations.zerovelocityplot!-Tuple{Any, CR3BPOrbit}","page":"Docstrings","title":"GeneralAstrodynamics.Visualizations.zerovelocityplot!","text":"zerovelocityplot!(fig, orbit; nondimensional_range, kwargs...)\n\n\nPlot the zero velocity curves for the Synodic, normalized CR3BP system to the last figure.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.Visualizations.zerovelocityplot-Tuple{CR3BPOrbit}","page":"Docstrings","title":"GeneralAstrodynamics.Visualizations.zerovelocityplot","text":"zerovelocityplot(orbit; nondimensional_range, kwargs...)\n\n\nPlot the zero velocity curves for the Synodic, normalized CR3BP system.\n\n\n\n\n\n","category":"method"}]
}
