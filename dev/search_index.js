var documenterSearchIndex = {"docs":
[{"location":"#GeneralAstrodynamics.jl","page":"Getting Started","title":"GeneralAstrodynamics.jl","text":"","category":"section"},{"location":"","page":"Getting Started","title":"Getting Started","text":"Common astrodynamics calculations in Julia, with units!","category":"page"},{"location":"","page":"Getting Started","title":"Getting Started","text":"note: Note\nThis package is fairly new, and documentation is even newer!  Thanks for your patience as we get these docs up and running. ","category":"page"},{"location":"#Introduction","page":"Getting Started","title":"Introduction","text":"","category":"section"},{"location":"","page":"Getting Started","title":"Getting Started","text":"Welcome! This package contains types, functions, and abstractions for common astrodynamics models, including the Restricted Two-body Problem,  the Circular Restricted Three-body Problem, and the N-body Problem, \nas well as some abstractions for interpolating ephemeris data.  If you're not familiar with those models by name, that's okay. We'll walk through common concepts in astrodynamics in this documentation, alongside GeneralAstrodynamics usage and syntax!","category":"page"},{"location":"","page":"Getting Started","title":"Getting Started","text":"You might imagine we want to describe how a spacecraft moves in space. As with all physical systems, reality is really complicated – we can  make simplifying assumptions to write models, or equations of motion which approximately describe how a spacecraft moves in space.  Some models are better than others in a variety of circumstances. For  example, if your spacecraft is only 200 km above the Earth's surface, then the gravity due to Earth will far outweigh the gravity of any other celestial body in our universe. On the other hand, if you're  around halfway between the Earth and the Moon, then a model which only includes the gravitational affect of one of the two bodies may not be  accurate enough to be useful. ","category":"page"},{"location":"","page":"Getting Started","title":"Getting Started","text":"Several models are provided by  AstrodynamicalModels.jl. Each are incorporated into this package. This documentation will soon get a lot better!","category":"page"},{"location":"#Restricted-Two-body-Problem","page":"Getting Started","title":"Restricted Two-body Problem","text":"","category":"section"},{"location":"","page":"Getting Started","title":"Getting Started","text":"A massless spacecraft orbiting one point mass.","category":"page"},{"location":"#Circular-Restricted-Three-body-Problem","page":"Getting Started","title":"Circular Restricted Three-body Problem","text":"","category":"section"},{"location":"","page":"Getting Started","title":"Getting Started","text":"A massless spacecraft orbiting two point masses which orbit their common center of mass.","category":"page"},{"location":"#N-body-Problem","page":"Getting Started","title":"N-body Problem","text":"","category":"section"},{"location":"","page":"Getting Started","title":"Getting Started","text":"A collection of N point masses which are each affected by the gravitational pull of the others.","category":"page"},{"location":"docstrings/#Docstrings","page":"Docstrings","title":"Docstrings","text":"","category":"section"},{"location":"docstrings/","page":"Docstrings","title":"Docstrings","text":"Documentation for all types, and functions in GeneralAstrodynamics.","category":"page"},{"location":"docstrings/","page":"Docstrings","title":"Docstrings","text":"Modules = [\n    GeneralAstrodynamics, \n    GeneralAstrodynamics.AstrodynamicalFrames,\n    GeneralAstrodynamics.AstrodynamicalStates,\n    GeneralAstrodynamics.AstrodynamicalCalculations,\n]\nOrder   = [:type, :function]","category":"page"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalFrames.AstrodynamicsFrame","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalFrames.AstrodynamicsFrame","text":"abstract type AstrodynamicsFrame\n\nA supertype for all coordinate frames used in space.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalFrames.AstrodynamicsTransform","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalFrames.AstrodynamicsTransform","text":"abstract type AstrodynamicsTransform\n\nA supertype for all astrodynamics coordinate frame transformations.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalFrames.BarycentricInertial","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalFrames.BarycentricInertial","text":"abstract type BarycentricInertial <: Inertial\n\nA supertype for all barycentric-ineretial coordinate frames in space.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalFrames.BarycentricRotating","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalFrames.BarycentricRotating","text":"abstract type BarycentricRotating <: Rotating\n\nA supertype for all barycentric-rotating coordinate frames in space.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalFrames.BodycentricInertial","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalFrames.BodycentricInertial","text":"abstract type BodycentricInertial <: Inertial\n\nA supertype for all bodycentric-inertial coordinate frames in space.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalFrames.BodycentricRotating","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalFrames.BodycentricRotating","text":"abstract type BodycentricRotating <: Rotating\n\nA supertype for all bodycentric-rotating coordinate frames in space.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalFrames.Inertial","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalFrames.Inertial","text":"abstract type Inertial <: AstrodynamicsFrame\n\nA supertype for all inertial coordinate frames in space.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalFrames.Rotating","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalFrames.Rotating","text":"abstract type Rotating <: AstrodynamicsFrame\n\nA supertype for all rotating coordinate frames in space.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalFrames.Transform","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalFrames.Transform","text":"struct Transform{F1<:AstrodynamicsFrame, F2<:AstrodynamicsFrame, T1<:CoordinateTransformations.Transformation, T2<:CoordinateTransformations.Transformation} <: AstrodynamicsTransform\n\nA generic frame transformation between two AstrodynamicsFrame types. Converts F1 toF2.\n\ntransform_position::CoordinateTransformations.Transformation\ntransform_velocity::CoordinateTransformations.Transformation\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalFrames.Transform-Union{Tuple{F2}, Tuple{F1}, Tuple{CoordinateTransformations.Transformation, CoordinateTransformations.Transformation, F1, F2}} where {F1<:AstrodynamicsTransform, F2<:AstrodynamicsTransform}","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalFrames.Transform","text":"Transform(position_transform, velocity_transform, from, to)\n\n\nAn outer constructor for Transform instances.  Provide position and velocity transformations, and the initial and final reference frames via  function arguments. This is an alternate syntax for Transform{InitialFrame, FinalFrame}(position_transform, velocity_transform).\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalFrames.isbarycentric-Union{Tuple{Type{T}}, Tuple{T}} where T<:AstrodynamicsFrame","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalFrames.isbarycentric","text":"Returns true or false to indicate whether the provided frame is barycentric.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalFrames.isbodycentric-Union{Tuple{Type{T}}, Tuple{T}} where T<:AstrodynamicsFrame","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalFrames.isbodycentric","text":"isbodycentric(_)\n\n\nReturns true or false to indicate whether the provided frame is bodycentric.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalFrames.isinertial-Union{Tuple{Type{T}}, Tuple{T}} where T<:AstrodynamicsFrame","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalFrames.isinertial","text":"Returns true or false to indicate whether the provided frame is Inertial.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalFrames.isrotating-Union{Tuple{Type{T}}, Tuple{T}} where T<:AstrodynamicsFrame","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalFrames.isrotating","text":"Returns true or false to indicate whether the provided frame is Rotating.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalStates.AbstractOrbit","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalStates.AbstractOrbit","text":"A supertype for all single-point orbit descriptions. Parameterized by coordinate frame, floating point type, mass unit, lenth unit, time unit, epoch type, state type, and parameter type (in order).\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalStates.CR3BPOrbit","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalStates.CR3BPOrbit","text":"struct Orbit{FR, F, MU, LU, TU, AU, E, var\"#s36\"<:CartesianState, var\"#s35\"<:CR3BPParameters} <: GeneralAstrodynamics.AstrodynamicalStates.AbstractOrbit{FR, F, MU, LU, TU, AU, E, var\"#s36\"<:CartesianState, var\"#s35\"<:CR3BPParameters}\n\nAn alias for Orbit instances about CR3BP systems.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalStates.CR3BPParameters","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalStates.CR3BPParameters","text":"All parameters required for the Circular Restricted Three-body Problem.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalStates.CartesianOrbit","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalStates.CartesianOrbit","text":"struct Orbit{FR, F, MU, LU, TU, AU, E, var\"#s36\"<:CartesianState, var\"#s35\"<:GeneralAstrodynamics.AstrodynamicalStates.ParameterVector} <: GeneralAstrodynamics.AstrodynamicalStates.AbstractOrbit{FR, F, MU, LU, TU, AU, E, var\"#s36\"<:CartesianState, var\"#s35\"<:GeneralAstrodynamics.AstrodynamicalStates.ParameterVector}\n\nAn alias for Orbit instances about any systems with CartesianState descriptions.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalStates.CartesianR2BPOrbit","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalStates.CartesianR2BPOrbit","text":"struct Orbit{FR, F, MU, LU, TU, AU, E, var\"#s36\"<:CartesianState, var\"#s35\"<:R2BPParameters} <: GeneralAstrodynamics.AstrodynamicalStates.AbstractOrbit{FR, F, MU, LU, TU, AU, E, var\"#s36\"<:CartesianState, var\"#s35\"<:R2BPParameters}\n\nAn alias for Orbit instances about R2BP systems with CartesianState descriptions.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalStates.CartesianState","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalStates.CartesianState","text":"A Cartesian state vector with length 6. Internally uses MVector and LVector to store data. Data is accessible via labels, which are x, y, z, ẋ, ẏ, ż, r, v, where r  access x,y,z and v accesses ẋ, ẏ, ż.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalStates.CartesianState-Tuple{AbstractArray, AbstractArray}","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalStates.CartesianState","text":"Constructs a CartesianState from provided position and velocity vectors.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalStates.CartesianState-Tuple{Any}","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalStates.CartesianState","text":"Constructs a CartesianState.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalStates.KeplerianR2BPOrbit","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalStates.KeplerianR2BPOrbit","text":"struct Orbit{FR, F, MU, LU, TU, AU, E, var\"#s36\"<:KeplerianState, var\"#s35\"<:R2BPParameters} <: GeneralAstrodynamics.AstrodynamicalStates.AbstractOrbit{FR, F, MU, LU, TU, AU, E, var\"#s36\"<:KeplerianState, var\"#s35\"<:R2BPParameters}\n\nAn alias for Orbit instances about R2BP systems with KeplerianState descriptions.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalStates.KeplerianState","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalStates.KeplerianState","text":"A Keplerian state vector with length 6. Internally uses MVector and LVector to store data. Data is accessible via labels, which are e, a, i, Ω, ω, ν.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalStates.KeplerianState-Tuple{Real, Any, Any, Any, Any, Any}","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalStates.KeplerianState","text":"Constructs a KeplerianState from provided position and velocity vectors.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalStates.KeplerianState-Union{Tuple{AbstractVector{var\"#s21\"} where var\"#s21\"<:Real}, Tuple{AU}, Tuple{TU}, Tuple{LU}, Tuple{F}} where {F, LU, TU, AU}","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalStates.KeplerianState","text":"Constructs a KeplerianState from any AbstractVector.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalStates.Orbit","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalStates.Orbit","text":"An orbit, described by a StateVector, with parameters described by a ParameterVector.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalStates.Orbit-2","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalStates.Orbit","text":"Outer constructor for Orbits.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalStates.ParameterVector","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalStates.ParameterVector","text":"A supertype for parameter representations in astrodynamics.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalStates.ParameterizedLabelledArray","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalStates.ParameterizedLabelledArray","text":"abstract type ParameterizedLabelledArray{F, N, T, L} <: DenseArray{F, N}\n\nA supertype for types that function like  LabelledArray.LArray or LabelledArray.SLArray  instances, but are under a new type tree. This is used in GeneralAstrodynamics for parameterizing  astrodynamics state vectors by physical units.\n\nnote: Note\nAll subtypes must have only one field: a LabelledArrays.LArray or LabelledArrays.SLArray field called __rawdata. All methods on this abstract type require this field to be called __rawdata!\n\nNearly all code which acts on this type is copied  and / or modified from LabelledArrays.jl source code. All credit goes to LabelledArrays.jl developers.  The LabelledArrays.jl LICENSE file is provided  in this docstring under Julia's Extended Help docstring section.\n\nExtended help\n\nLabelledArrays.jl License\n\nThe LabelledArrays.jl package is licensed under the MIT \"Expat\" License:\n\nCopyright (c) 2017: Christopher Rackauckas.Permission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the \"Software\"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalStates.R2BPOrbit","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalStates.R2BPOrbit","text":"struct Orbit{FR, F, MU, LU, TU, AU, E, var\"#s36\"<:Union{CartesianState, KeplerianState}, var\"#s35\"<:R2BPParameters} <: GeneralAstrodynamics.AstrodynamicalStates.AbstractOrbit{FR, F, MU, LU, TU, AU, E, var\"#s36\"<:Union{CartesianState, KeplerianState}, var\"#s35\"<:R2BPParameters}\n\nAn alias for Orbit instances about R2BP systems.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalStates.R2BPParameters","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalStates.R2BPParameters","text":"All parameters required for the Restricted Two-body Problem.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalStates.StateVector","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalStates.StateVector","text":"A supertype for all state representations in astrodynamics.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#ArrayInterface.restructure-Union{Tuple{F2}, Tuple{F1}, Tuple{GeneralAstrodynamics.AstrodynamicalStates.ParameterizedLabelledArray{F1, N, T, L} where {N, T, L}, GeneralAstrodynamics.AstrodynamicalStates.ParameterizedLabelledArray{F2, N, T, L} where {N, T, L}}} where {F1, F2}","page":"Docstrings","title":"ArrayInterface.restructure","text":"restructure(x, y)\n\n\nrestructure(x, y)\n\n\nReshapes a ParameterizedLabelledArray.\n\nThis source code which provides this functionality was copied directly from LabelledArrays.jl source code. The LabelledArrays.jl license text is provided in Julia's Extended Help section (accessible via @doc, or ?? in Julia's REPL).\n\nExtended Help\n\nLabelledArrays.jl License\n\nThe LabelledArrays.jl package is licensed under the MIT \"Expat\" License:\n\nCopyright (c) 2017: Christopher Rackauckas.Permission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the \"Software\"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.convert-Tuple{Type{var\"#s12\"} where var\"#s12\"<:Array, GeneralAstrodynamics.AstrodynamicalStates.ParameterizedLabelledArray}","page":"Docstrings","title":"Base.convert","text":"convert(_, x)\n\n\nconvert(_, x)\n\n\nConverts the underlying floating point type for a ParameterizedLabelledArray.\n\nThis source code which provides this functionality was copied directly from LabelledArrays.jl source code. The LabelledArrays.jl license text is provided in Julia's Extended Help section (accessible via @doc, or ?? in Julia's REPL).\n\nExtended Help\n\nLabelledArrays.jl License\n\nThe LabelledArrays.jl package is licensed under the MIT \"Expat\" License:\n\nCopyright (c) 2017: Christopher Rackauckas.Permission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the \"Software\"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.convert-Union{Tuple{AU}, Tuple{TU}, Tuple{LU}, Tuple{MU}, Tuple{F}, Tuple{Type{CR3BPParameters{F, MU, LU, TU, AU, B} where B}, CR3BPParameters}} where {F, MU, LU, TU, AU}","page":"Docstrings","title":"Base.convert","text":"convert(_, params)\n\n\nConverts between CR3BPParameters.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.convert-Union{Tuple{AU}, Tuple{TU}, Tuple{LU}, Tuple{MU}, Tuple{F}, Tuple{Type{R2BPParameters{F, MU, LU, TU, AU, B} where B}, R2BPParameters}} where {F, MU, LU, TU, AU}","page":"Docstrings","title":"Base.convert","text":"convert(_, params)\n\n\nConverts between R2BPParameters.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.convert-Union{Tuple{T}, Tuple{Type{T}, Any}} where T<:GeneralAstrodynamics.AstrodynamicalStates.ParameterizedLabelledArray","page":"Docstrings","title":"Base.convert","text":"convert(_, x)\n\n\nconvert(_, x)\n\n\nConverts the underlying floating point type for a ParameterizedLabelledArray.\n\nThis source code which provides this functionality was copied directly from LabelledArrays.jl source code. The LabelledArrays.jl license text is provided in Julia's Extended Help section (accessible via @doc, or ?? in Julia's REPL).\n\nExtended Help\n\nLabelledArrays.jl License\n\nThe LabelledArrays.jl package is licensed under the MIT \"Expat\" License:\n\nCopyright (c) 2017: Christopher Rackauckas.Permission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the \"Software\"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.convert-Union{Tuple{T}, Tuple{Type{T}, T}} where T<:GeneralAstrodynamics.AstrodynamicalStates.ParameterizedLabelledArray","page":"Docstrings","title":"Base.convert","text":"convert(_, x)\n\n\nconvert(_, x)\n\n\nConverts the underlying floating point type for a ParameterizedLabelledArray.\n\nThis source code which provides this functionality was copied directly from LabelledArrays.jl source code. The LabelledArrays.jl license text is provided in Julia's Extended Help section (accessible via @doc, or ?? in Julia's REPL).\n\nExtended Help\n\nLabelledArrays.jl License\n\nThe LabelledArrays.jl package is licensed under the MIT \"Expat\" License:\n\nCopyright (c) 2017: Christopher Rackauckas.Permission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the \"Software\"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.copy-Tuple{GeneralAstrodynamics.AstrodynamicalStates.ParameterizedLabelledArray}","page":"Docstrings","title":"Base.copy","text":"copy(x)\n\n\ncopy(x)\n\n\nShallow copies a ParameterizedLabelledArray.\n\nThis source code which provides this functionality was copied directly from LabelledArrays.jl source code. The LabelledArrays.jl license text is provided in Julia's Extended Help section (accessible via @doc, or ?? in Julia's REPL).\n\nExtended Help\n\nLabelledArrays.jl License\n\nThe LabelledArrays.jl package is licensed under the MIT \"Expat\" License:\n\nCopyright (c) 2017: Christopher Rackauckas.Permission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the \"Software\"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.copyto!-Union{Tuple{C}, Tuple{C, C}} where C<:GeneralAstrodynamics.AstrodynamicalStates.ParameterizedLabelledArray","page":"Docstrings","title":"Base.copyto!","text":"copyto!(x, y)\n\n\ncopyto!(x, y)\n\n\nCopies one ParameterizedLabelledArray to another.\n\nThis source code which provides this functionality was copied directly from LabelledArrays.jl source code. The LabelledArrays.jl license text is provided in Julia's Extended Help section (accessible via @doc, or ?? in Julia's REPL).\n\nExtended Help\n\nLabelledArrays.jl License\n\nThe LabelledArrays.jl package is licensed under the MIT \"Expat\" License:\n\nCopyright (c) 2017: Christopher Rackauckas.Permission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the \"Software\"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.dataids-Tuple{GeneralAstrodynamics.AstrodynamicalStates.ParameterizedLabelledArray}","page":"Docstrings","title":"Base.dataids","text":"dataids(A)\n\n\ndataids(A)\n\n\nImplements dataids for a ParameterizedLabelledArray instance.\n\nThis source code which provides this functionality was copied directly from LabelledArrays.jl source code. The LabelledArrays.jl license text is provided in Julia's Extended Help section (accessible via @doc, or ?? in Julia's REPL).\n\nExtended Help\n\nLabelledArrays.jl License\n\nThe LabelledArrays.jl package is licensed under the MIT \"Expat\" License:\n\nCopyright (c) 2017: Christopher Rackauckas.Permission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the \"Software\"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.deepcopy-Tuple{GeneralAstrodynamics.AstrodynamicalStates.ParameterizedLabelledArray}","page":"Docstrings","title":"Base.deepcopy","text":"deepcopy(x)\n\n\ndeepcopy(x)\n\n\nDeep copies a ParameterizedLabelledArray.\n\nThis source code which provides this functionality was copied directly from LabelledArrays.jl source code. The LabelledArrays.jl license text is provided in Julia's Extended Help section (accessible via @doc, or ?? in Julia's REPL).\n\nExtended Help\n\nLabelledArrays.jl License\n\nThe LabelledArrays.jl package is licensed under the MIT \"Expat\" License:\n\nCopyright (c) 2017: Christopher Rackauckas.Permission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the \"Software\"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.elsize-Union{Tuple{GeneralAstrodynamics.AstrodynamicalStates.ParameterizedLabelledArray{F, N, T, L} where {N, T, L}}, Tuple{F}} where F","page":"Docstrings","title":"Base.elsize","text":"Returns the memory stride for any ParameterizedLabelledArray.\n\nThis source code which provides this functionality was copied directly from LabelledArrays.jl source code. The LabelledArrays.jl license text is provided in Julia's Extended Help section (accessible via @doc, or ?? in Julia's REPL).\n\nExtended Help\n\nLabelledArrays.jl License\n\nThe LabelledArrays.jl package is licensed under the MIT \"Expat\" License:\n\nCopyright (c) 2017: Christopher Rackauckas.Permission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the \"Software\"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.getindex-Tuple{GeneralAstrodynamics.AstrodynamicalStates.ParameterizedLabelledArray, Vararg{Any, N} where N}","page":"Docstrings","title":"Base.getindex","text":"getindex(state, args)\n\n\ngetindex(state, args)\n\n\nReturns the index of the ParameterizedLabelledArray.\n\nThis source code which provides this functionality was copied directly from LabelledArrays.jl source code. The LabelledArrays.jl license text is provided in Julia's Extended Help section (accessible via @doc, or ?? in Julia's REPL).\n\nExtended Help\n\nLabelledArrays.jl License\n\nThe LabelledArrays.jl package is licensed under the MIT \"Expat\" License:\n\nCopyright (c) 2017: Christopher Rackauckas.Permission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the \"Software\"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.getproperty-Tuple{GeneralAstrodynamics.AstrodynamicalStates.ParameterizedLabelledArray, Symbol}","page":"Docstrings","title":"Base.getproperty","text":"getproperty(x, s)\n\n\ngetproperty(x, s)\n\n\nOverrides Base.getproperty for all ParameterizedLabelledArray instances.\n\nThis source code which provides this functionality was copied directly from LabelledArrays.jl source code. The LabelledArrays.jl license text is provided in Julia's Extended Help section (accessible via @doc, or ?? in Julia's REPL).\n\nExtended Help\n\nLabelledArrays.jl License\n\nThe LabelledArrays.jl package is licensed under the MIT \"Expat\" License:\n\nCopyright (c) 2017: Christopher Rackauckas.Permission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the \"Software\"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.length-Tuple{GeneralAstrodynamics.AstrodynamicalStates.StateVector}","page":"Docstrings","title":"Base.length","text":"length(_)\n\n\nThe length of any StateVector is 6!\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.length-Union{Tuple{GeneralAstrodynamics.AstrodynamicalStates.ParameterVector{F, MU, LU, TU, AU, N, T, B} where {T, B}}, Tuple{N}, Tuple{AU}, Tuple{TU}, Tuple{LU}, Tuple{MU}, Tuple{F}} where {F, MU, LU, TU, AU, N}","page":"Docstrings","title":"Base.length","text":"Returns the length of the parameter vector.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.propertynames-Union{Tuple{GeneralAstrodynamics.AstrodynamicalStates.ParameterizedLabelledArray{F, N, T, L} where L}, Tuple{T}, Tuple{N}, Tuple{F}} where {F, N, T}","page":"Docstrings","title":"Base.propertynames","text":"propertynames(_)\n\n\npropertynames(_)\n\n\nReturns dot-accessible property names for a ParameterizedLabelledArray.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.setindex!-Tuple{GeneralAstrodynamics.AstrodynamicalStates.ParameterizedLabelledArray, Vararg{Any, N} where N}","page":"Docstrings","title":"Base.setindex!","text":"setindex!(state, args)\n\n\nsetindex!(state, args)\n\n\nSets the index of the ParameterizedLabelledArray.\n\nThis source code which provides this functionality was copied directly from LabelledArrays.jl source code. The LabelledArrays.jl license text is provided in Julia's Extended Help section (accessible via @doc, or ?? in Julia's REPL).\n\nExtended Help\n\nLabelledArrays.jl License\n\nThe LabelledArrays.jl package is licensed under the MIT \"Expat\" License:\n\nCopyright (c) 2017: Christopher Rackauckas.Permission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the \"Software\"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.setproperty!-Tuple{GeneralAstrodynamics.AstrodynamicalStates.ParameterizedLabelledArray, Symbol, Any}","page":"Docstrings","title":"Base.setproperty!","text":"setproperty!(x, s, y)\n\n\nsetproperty!(x, s, y)\n\n\nSets indices of a ParameterizedLabelledArray via label.\n\nThis source code which provides this functionality was copied directly from LabelledArrays.jl source code. The LabelledArrays.jl license text is provided in Julia's Extended Help section (accessible via @doc, or ?? in Julia's REPL).\n\nExtended Help\n\nLabelledArrays.jl License\n\nThe LabelledArrays.jl package is licensed under the MIT \"Expat\" License:\n\nCopyright (c) 2017: Christopher Rackauckas.Permission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the \"Software\"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.show-Tuple{IO, CR3BPParameters}","page":"Docstrings","title":"Base.show","text":"show(io, state; showfloats, space)\n\n\nDisplays CR3BPParameters.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.show-Tuple{IO, CartesianState}","page":"Docstrings","title":"Base.show","text":"show(io, state; showfloats, space)\n\n\nDisplays a CartesianState.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.show-Tuple{IO, KeplerianState}","page":"Docstrings","title":"Base.show","text":"show(io, state; showfloats, space)\n\n\nDisplays a KeplerianState.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.show-Tuple{IO, MIME{Symbol(\"text/plain\")}, CartesianState}","page":"Docstrings","title":"Base.show","text":"show(io, , state; showfloats, space)\n\n\nDisplays a CartesianState.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.show-Tuple{IO, MIME{Symbol(\"text/plain\")}, KeplerianState}","page":"Docstrings","title":"Base.show","text":"show(io, , state; showfloats, space)\n\n\nDisplays a KeplerianState.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.show-Tuple{IO, R2BPParameters}","page":"Docstrings","title":"Base.show","text":"show(io, state; showfloats, space)\n\n\nDisplays R2BPParameters.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.similar-Union{Tuple{N}, Tuple{S}, Tuple{GeneralAstrodynamics.AstrodynamicalStates.ParameterizedLabelledArray, Type{S}, Tuple{Vararg{Int64, N}}}} where {S, N}","page":"Docstrings","title":"Base.similar","text":"similar(x, _, dims)\n\n\nsimilar(x, _, dims)\n\n\nOverrides similar for ParameterizedLabelledArray instances.\n\nThis source code which provides this functionality was copied directly from LabelledArrays.jl source code. The LabelledArrays.jl license text is provided in Julia's Extended Help section (accessible via @doc, or ?? in Julia's REPL).\n\nExtended Help\n\nLabelledArrays.jl License\n\nThe LabelledArrays.jl package is licensed under the MIT \"Expat\" License:\n\nCopyright (c) 2017: Christopher Rackauckas.Permission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the \"Software\"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.size-Tuple{GeneralAstrodynamics.AstrodynamicalStates.StateVector}","page":"Docstrings","title":"Base.size","text":"size(_)\n\n\nThe size of any StateVector is (6,)!\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.size-Union{Tuple{GeneralAstrodynamics.AstrodynamicalStates.ParameterVector{F, MU, LU, TU, AU, N, T, B} where {T, B}}, Tuple{N}, Tuple{AU}, Tuple{TU}, Tuple{LU}, Tuple{MU}, Tuple{F}} where {F, MU, LU, TU, AU, N}","page":"Docstrings","title":"Base.size","text":"Returns the size of the parameter vector.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#Base.unsafe_convert-Union{Tuple{F}, Tuple{T}, Tuple{Type{Ptr{T}}, GeneralAstrodynamics.AstrodynamicalStates.ParameterizedLabelledArray{F, N, T, L} where {N, T, L}}} where {T, F}","page":"Docstrings","title":"Base.unsafe_convert","text":"unsafe_convert(_, a)\n\n\nunsafe_convert(_, a)\n\n\nProvides unsafe_convert for ParameterizedLabelledArray types for use with LAPACK.\n\nThis source code which provides this functionality was copied directly from LabelledArrays.jl source code. The LabelledArrays.jl license text is provided in Julia's Extended Help section (accessible via @doc, or ?? in Julia's REPL).\n\nExtended Help\n\nLabelledArrays.jl License\n\nThe LabelledArrays.jl package is licensed under the MIT \"Expat\" License:\n\nCopyright (c) 2017: Christopher Rackauckas.Permission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the \"Software\"), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalStates.angularunit-Union{Tuple{GeneralAstrodynamics.AstrodynamicalStates.ParameterVector{F, MU, LU, TU, AU, N, T, B} where {T, B}}, Tuple{N}, Tuple{AU}, Tuple{TU}, Tuple{LU}, Tuple{MU}, Tuple{F}} where {F, MU, LU, TU, AU, N}","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalStates.angularunit","text":"Returns the angular unit of the parameter vector.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalStates.angularunit-Union{Tuple{GeneralAstrodynamics.AstrodynamicalStates.StateVector{F, LU, TU, AU, T} where T}, Tuple{AU}, Tuple{TU}, Tuple{LU}, Tuple{F}} where {F, LU, TU, AU}","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalStates.angularunit","text":"Returns the angularunit of the state vector.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalStates.epoch-Tuple{Orbit}","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalStates.epoch","text":"epoch(orbit)\n\n\nReturns the epoch (timestamp) for the Orbit.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalStates.get_a-Tuple{CartesianState}","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalStates.get_a","text":"get_a(state)\n\n\nReturns a.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalStates.get_e-Tuple{CartesianState}","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalStates.get_e","text":"get_e(state)\n\n\nReturns e.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalStates.get_i-Tuple{CartesianState}","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalStates.get_i","text":"get_i(state)\n\n\nReturns i.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalStates.get_r-Tuple{CartesianState}","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalStates.get_r","text":"get_r(state)\n\n\nReturns r.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalStates.get_v-Tuple{CartesianState}","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalStates.get_v","text":"get_v(state)\n\n\nReturns v.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalStates.get_x-Tuple{CartesianState}","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalStates.get_x","text":"get_x(state)\n\n\nReturns x.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalStates.get_y-Tuple{CartesianState}","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalStates.get_y","text":"get_y(state)\n\n\nReturns y.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalStates.get_z-Tuple{CartesianState}","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalStates.get_z","text":"get_z(state)\n\n\nReturns z.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalStates.get_ż-Tuple{CartesianState}","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalStates.get_ż","text":"get_ż(state)\n\n\nReturns ż.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalStates.get_Ω-Tuple{CartesianState}","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalStates.get_Ω","text":"get_Ω(state)\n\n\nReturns Ω.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalStates.get_ν-Tuple{CartesianState}","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalStates.get_ν","text":"get_ν(state)\n\n\nReturns ν.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalStates.get_ω-Tuple{CartesianState}","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalStates.get_ω","text":"get_ω(state)\n\n\nReturns `ω.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalStates.get_ẋ-Tuple{CartesianState}","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalStates.get_ẋ","text":"get_ẋ(state)\n\n\nReturns ẋ.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalStates.get_ẏ-Tuple{CartesianState}","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalStates.get_ẏ","text":"get_ẏ(state)\n\n\nReturns ẏ.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalStates.lengthunit-Union{Tuple{GeneralAstrodynamics.AstrodynamicalStates.ParameterVector{F, MU, LU, TU, AU, N, T, B} where {T, B}}, Tuple{N}, Tuple{AU}, Tuple{TU}, Tuple{LU}, Tuple{MU}, Tuple{F}} where {F, MU, LU, TU, AU, N}","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalStates.lengthunit","text":"Returns the length unit of the parameter vector.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalStates.lengthunit-Union{Tuple{GeneralAstrodynamics.AstrodynamicalStates.StateVector{F, LU, TU, AU, T} where T}, Tuple{AU}, Tuple{TU}, Tuple{LU}, Tuple{F}} where {F, LU, TU, AU}","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalStates.lengthunit","text":"Returns the lengthunit of the state vector.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalStates.massparameter-Tuple{R2BPParameters}","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalStates.massparameter","text":"massparameter(system)\n\n\nReturns the mass parameter of the R2BP system.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalStates.massparameters-Tuple{CR3BPParameters}","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalStates.massparameters","text":"massparameters(system)\n\n\nReturns the mass parameters of the CR3BP system.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalStates.massparamunit-Union{Tuple{GeneralAstrodynamics.AstrodynamicalStates.ParameterVector{F, MU, LU, TU, AU, N, T, B} where {N, T, B}}, Tuple{AU}, Tuple{TU}, Tuple{LU}, Tuple{MU}, Tuple{F}} where {F, MU, LU, TU, AU}","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalStates.massparamunit","text":"Returns the mass-parameter unit of the state vector.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalStates.massunit-Union{Tuple{GeneralAstrodynamics.AstrodynamicalStates.ParameterVector{F, MU, LU, TU, AU, N, T, B} where {T, B}}, Tuple{N}, Tuple{AU}, Tuple{TU}, Tuple{LU}, Tuple{MU}, Tuple{F}} where {F, MU, LU, TU, AU, N}","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalStates.massunit","text":"Returns the mass unit of the parameter vector.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalStates.name-Union{Tuple{GeneralAstrodynamics.AstrodynamicalStates.ParameterVector{F, MU, LU, TU, AU, N, T, B}}, Tuple{B}, Tuple{T}, Tuple{N}, Tuple{AU}, Tuple{TU}, Tuple{LU}, Tuple{MU}, Tuple{F}} where {F, MU, LU, TU, AU, N, T, B}","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalStates.name","text":"Returns the name of the parameter vector.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalStates.normalized_massparameter-Tuple{CR3BPParameters}","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalStates.normalized_massparameter","text":"normalized_massparameter(system)\n\n\nReturns the mass parameter of the CR3BP system.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalStates.primary_massparameter-Tuple{CR3BPParameters}","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalStates.primary_massparameter","text":"primary_massparameter(system)\n\n\nReturns the primary mass parameter of the CR3BP system.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalStates.secondary_massparameter-Tuple{CR3BPParameters}","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalStates.secondary_massparameter","text":"secondary_massparameter(system)\n\n\nReturns the secondary mass parameter of the CR3BP system.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalStates.state-Tuple{Orbit}","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalStates.state","text":"state(orbit)\n\n\nReturns the state vector for the Orbit.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalStates.statevector-Tuple{CartesianState}","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalStates.statevector","text":"statevector(state)\n\n\nReturns the whole state vector, with units.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalStates.statevector-Tuple{KeplerianState}","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalStates.statevector","text":"statevector(state)\n\n\nReturns the whole state vector, with units.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalStates.system-Tuple{Orbit}","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalStates.system","text":"system(orbit)\n\n\nReturns the parameter vector for the Orbit.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalStates.timeunit-Union{Tuple{GeneralAstrodynamics.AstrodynamicalStates.ParameterVector{F, MU, LU, TU, AU, N, T, B} where {T, B}}, Tuple{N}, Tuple{AU}, Tuple{TU}, Tuple{LU}, Tuple{MU}, Tuple{F}} where {F, MU, LU, TU, AU, N}","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalStates.timeunit","text":"Returns the time unit of the parameter vector.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalStates.timeunit-Union{Tuple{GeneralAstrodynamics.AstrodynamicalStates.StateVector{F, LU, TU, AU, T} where T}, Tuple{AU}, Tuple{TU}, Tuple{LU}, Tuple{F}} where {F, LU, TU, AU}","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalStates.timeunit","text":"Returns the timeunit of the state vector.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalStates.velocityunit-Union{Tuple{GeneralAstrodynamics.AstrodynamicalStates.ParameterVector{F, MU, LU, TU, AU, N, T, B} where {N, T, B}}, Tuple{AU}, Tuple{TU}, Tuple{LU}, Tuple{MU}, Tuple{F}} where {F, MU, LU, TU, AU}","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalStates.velocityunit","text":"Returns the velocity unit of the state vector.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalStates.velocityunit-Union{Tuple{GeneralAstrodynamics.AstrodynamicalStates.StateVector{F, LU, TU, AU, T} where T}, Tuple{AU}, Tuple{TU}, Tuple{LU}, Tuple{F}} where {F, LU, TU, AU}","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalStates.velocityunit","text":"Returns the angularunit of the state vector.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalCalculations.Circular","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalCalculations.Circular","text":"abstract type Circular <: GeneralAstrodynamics.AstrodynamicalCalculations.ConicSection\n\nAn abstract type representing the Circular  conic section.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalCalculations.ConicSection","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalCalculations.ConicSection","text":"abstract type ConicSection\n\nAn abstract type for all conic sections.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalCalculations.Elliptical","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalCalculations.Elliptical","text":"abstract type Elliptical <: GeneralAstrodynamics.AstrodynamicalCalculations.ConicSection\n\nAn abstract type representing the Elliptical  conic section.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalCalculations.Hyperbolic","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalCalculations.Hyperbolic","text":"abstract type Hyperbolic <: GeneralAstrodynamics.AstrodynamicalCalculations.ConicSection\n\nAn abstract type representing the Hyperbolic  conic section.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalCalculations.Parabolic","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalCalculations.Parabolic","text":"abstract type Parabolic <: GeneralAstrodynamics.AstrodynamicalCalculations.ConicSection\n\nAn abstract type representing the Parabolic  conic section.\n\n\n\n\n\n","category":"type"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalCalculations.C3-Tuple{Any, Any, Any}","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalCalculations.C3","text":"C3(r, v, μ)\n\n\nReturns C3 value.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalCalculations.SOA-Tuple{Any, Any, Any}","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalCalculations.SOA","text":"SOA(a, m, M)\n\n\nSphere of activity.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalCalculations.SOI-Tuple{Any, Any, Any}","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalCalculations.SOI","text":"SOI(a, m, M)\n\n\nSphere of influence.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalCalculations.apoapsis_radius-Tuple{Any, Any}","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalCalculations.apoapsis_radius","text":"apoapsis_radius(a, e)\n\n\nReturns apoapsis distance, rₐ.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalCalculations.cartesian-NTuple{7, Any}","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalCalculations.cartesian","text":"cartesian(e, a, i, Ω, ω, ν, μ)\n\n\nReturns a Cartesian representation of a Keplerian two-body orbital state in an inertial frame, centered at the center of mass of the central body. Algorithm taught in ENAE601.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalCalculations.conic-Tuple{T} where T<:Real","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalCalculations.conic","text":"conic(e)\n\n\nReturns the conic section, as specified by eccentricity e.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalCalculations.distance-Tuple{Any, Any, Any}","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalCalculations.distance","text":"distance(p, e, ν)\n\n\nReturns distance, r.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalCalculations.eccentricity-Tuple{Any, Any, Any}","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalCalculations.eccentricity","text":"eccentricity(rᵢ, vᵢ, μ)\n\n\nReturns orbital eccentricity, e.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalCalculations.eccentricity_vector-Tuple{Any, Any, Any}","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalCalculations.eccentricity_vector","text":"eccentricity_vector(rᵢ, vᵢ, μ)\n\n\nReturns orbital eccentricity vector e̅.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalCalculations.hohmann-Tuple{Any, Any, Any}","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalCalculations.hohmann","text":"hohmann(r₁, r₂, μ)\n\n\nComputes a Hohmann transfer, and returns the departure and  arrival velocity vectors. \n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalCalculations.keplerian-Tuple{Any, Any, Any}","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalCalculations.keplerian","text":"keplerian(rᵢ, vᵢ, μ)\n\n\nReturns a Keplarian representation of a Cartesian orbital state. Algorithm taught in ENAE601.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalCalculations.mean_motion-Tuple{Any, Any}","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalCalculations.mean_motion","text":"mean_motion(a, μ)\n\n\nReturns mean motion, n.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalCalculations.periapsis_radius-Tuple{Any, Any}","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalCalculations.periapsis_radius","text":"periapsis_radius(a, e)\n\n\nReturns periapsis distance, rₚ.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalCalculations.perifocal-NTuple{4, Any}","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalCalculations.perifocal","text":"perifocal(a, e, ν, μ)\n\n\nReturns position and velocity vectors in the Perifocal frame.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalCalculations.period-Tuple{Any, Any}","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalCalculations.period","text":"period(a, μ)\n\n\nReturns the orbital period.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalCalculations.semi_parameter-Tuple{Any, Any}","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalCalculations.semi_parameter","text":"semi_parameter(a, e)\n\n\nReturns semilatus parameter, p.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalCalculations.semimajor_axis-Tuple{Any, Any, Any}","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalCalculations.semimajor_axis","text":"semimajor_axis(r, v, μ)\n\n\nReturns semimajor axis parameter, a.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalCalculations.spatial-NTuple{5, Any}","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalCalculations.spatial","text":"spatial(i, Ω, ω, rₚ, vₚ)\n\n\nReturns a spatial representation of the provied Perifocal state.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalCalculations.specific_angular_momentum-Tuple{Any, Any}","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalCalculations.specific_angular_momentum","text":"specific_angular_momentum(rᵢ, vᵢ)\n\n\nReturns scalar specific angular momentum vector, h.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalCalculations.specific_angular_momentum_vector-Tuple{Any, Any}","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalCalculations.specific_angular_momentum_vector","text":"specific_angular_momentum_vector(rᵢ, vᵢ)\n\n\nReturns specific angular momentum vector, h̅.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalCalculations.specific_energy-Tuple{Any, Any}","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalCalculations.specific_energy","text":"specific_energy(a, μ)\n\n\nReturns specific orbital energy, ϵ.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalCalculations.specific_potential_energy-Tuple{Any, Any}","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalCalculations.specific_potential_energy","text":"specific_potential_energy(r, μ)\n\n\nReturns potential energy for an orbit about a RestrictedTwoBodySystem.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalCalculations.speed-NTuple{5, Any}","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalCalculations.speed","text":"speed(p, e, ν, a, μ)\n\n\nReturns the instantaneous velocity, v, for any orbital representation.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalCalculations.speed-Tuple{Any, Any, Any}","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalCalculations.speed","text":"speed(r, a, μ)\n\n\nReturns instantaneous velocity, v, for any orbital representation.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalCalculations.time_since_periapsis-Tuple{Any, Any, Any}","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalCalculations.time_since_periapsis","text":"time_since_periapsis(n, e, E)\n\n\nReturns time since periapsis, t.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalCalculations.true_anomoly-NTuple{4, Any}","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalCalculations.true_anomoly","text":"true_anomoly(r, h, e, μ)\n\n\nReturns true anomoly, ν.\n\n\n\n\n\n","category":"method"},{"location":"docstrings/#GeneralAstrodynamics.AstrodynamicalCalculations.v_infinity-Tuple{Any, Any, Any}","page":"Docstrings","title":"GeneralAstrodynamics.AstrodynamicalCalculations.v_infinity","text":"v_infinity(r, v, μ)\n\n\nReturns v∞.\n\n\n\n\n\n","category":"method"}]
}
