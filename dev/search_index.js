var documenterSearchIndex = {"docs":
[{"location":"Plots/functions/#Plotting-TwoBody-and-NBody-Systems","page":"Functions","title":"Plotting TwoBody and NBody Systems","text":"","category":"section"},{"location":"Plots/functions/","page":"Functions","title":"Functions","text":"Currently, two functions are provided to calculate information for a MultibodySystem: system_energy, which calculates the total energy for the system, and system_angular_momentum, which calculates the total angular momentum for the system.","category":"page"},{"location":"Plots/functions/","page":"Functions","title":"Functions","text":"plot3d","category":"page"},{"location":"Plots/functions/#UnitfulAstrodynamics.Plots.plot3d","page":"Functions","title":"UnitfulAstrodynamics.Plots.plot3d","text":"plot3d(sols::TwobodyPropagationResult; kwargs...)\n\nPlots every timestep in sols in 3D space. All keyward  arguments are passed directly to Plots.jl.\n\n\n\n\n\nplot3d(sols::MultibodyPropagationResult; kwargs...)\n\nPlots every timestep in sols in 3D space. All keyward  arguments are passed directly to Plots.jl.\n\n\n\n\n\n","category":"function"},{"location":"NBody/functions/#NBody-Calculations","page":"Functions","title":"NBody Calculations","text":"","category":"section"},{"location":"NBody/functions/","page":"Functions","title":"Functions","text":"Currently, two functions are provided to calculate information for a MultibodySystem: system_energy, which calculates the total energy for the system, and system_angular_momentum, which calculates the total angular momentum for the system.","category":"page"},{"location":"NBody/functions/","page":"Functions","title":"Functions","text":"system_energy\nsystem_angular_momentum","category":"page"},{"location":"NBody/functions/#UnitfulAstrodynamics.NBody.system_energy","page":"Functions","title":"UnitfulAstrodynamics.NBody.system_energy","text":"system_energy(sys::MultibodySystem)\n\nReturns total energy for NBody system.\n\n\n\n\n\n","category":"function"},{"location":"NBody/functions/#UnitfulAstrodynamics.NBody.system_angular_momentum","page":"Functions","title":"UnitfulAstrodynamics.NBody.system_angular_momentum","text":"system_angular_momentum(sys::MultibodySystem)\n\nReturns total angular momentum for NBody system.\n\n\n\n\n\n","category":"function"},{"location":"NBody/types/#NBody-Data-Structures","page":"Data Structures and Types","title":"NBody Data Structures","text":"","category":"section"},{"location":"NBody/types/","page":"Data Structures and Types","title":"Data Structures and Types","text":"As with TwoBody Data Structures, the NBody submodule includes data structures for storing multibody orbital states. The Body structure holds position, velocity, and mass information for a single body. A MultibodySystem contains an array of Body structures, and is used to completely describe a multibody orbital state.","category":"page"},{"location":"NBody/types/","page":"Data Structures and Types","title":"Data Structures and Types","text":"Body\nMultibodySystem","category":"page"},{"location":"NBody/types/#UnitfulAstrodynamics.NBody.Body","page":"Data Structures and Types","title":"UnitfulAstrodynamics.NBody.Body","text":"Body\n\nStores the state of each body in the NBody problem.\n\n\n\n\n\n","category":"type"},{"location":"NBody/types/#UnitfulAstrodynamics.NBody.MultibodySystem","page":"Data Structures and Types","title":"UnitfulAstrodynamics.NBody.MultibodySystem","text":"System\n\nDescribes a system of n MultibodyStates's.\n\n\n\n\n\n","category":"type"},{"location":"Propagators/types/#Storing-Propagation-Results","page":"Data Structures and Types","title":"Storing Propagation Results","text":"","category":"section"},{"location":"Propagators/types/","page":"Data Structures and Types","title":"Data Structures and Types","text":"Both TwoBody and NBody systems have a structure for storing propagation results.","category":"page"},{"location":"Propagators/types/","page":"Data Structures and Types","title":"Data Structures and Types","text":"TwobodyPropagationResult\nMultibodyPropagationResult","category":"page"},{"location":"Propagators/types/#UnitfulAstrodynamics.Propagators.TwobodyPropagationResult","page":"Data Structures and Types","title":"UnitfulAstrodynamics.Propagators.TwobodyPropagationResult","text":"TwobodyPropagationResult <: PropagationResult\n\nStruct to hold two-body propagation results.\n\n\n\n\n\n","category":"type"},{"location":"Propagators/types/#UnitfulAstrodynamics.Propagators.MultibodyPropagationResult","page":"Data Structures and Types","title":"UnitfulAstrodynamics.Propagators.MultibodyPropagationResult","text":"MultibodyPropagationResult{T,B} <: PropagationResult\n\nStruct to hold n-body propagation results.\n\n\n\n\n\n","category":"type"},{"location":"Propagators/functions/#Propagating-Orbits","page":"Functions","title":"Propagating Orbits","text":"","category":"section"},{"location":"Propagators/functions/","page":"Functions","title":"Functions","text":"A function propagate is defined for both TwoBody and NBody orbits.","category":"page"},{"location":"Propagators/functions/","page":"Functions","title":"Functions","text":"propagate","category":"page"},{"location":"Propagators/functions/#UnitfulAstrodynamics.Propagators.propagate","page":"Functions","title":"UnitfulAstrodynamics.Propagators.propagate","text":"propagate_twobody(orbit::Orbit, \n               Δt::Unitful.Time=orbital_period(orbit), \n               ode_alg::OrdinaryDiffEqAlgorithm=Tsit5(); \n               kwargs...)\n\nUses OrdinaryDiffEq solvers to propagate orbit Δt into the future. All keyword arguments are passed directly to OrdinaryDiffEq solvers.\n\n\n\n\n\npropagate(sys::MultibodySystem, Δt::Unitful.Quantity, ode_alg::OrdinaryDiffEqAlgorithm = Tsit5(); kwargs...)\n\nUses OrdinaryDiffEq solvers to propagate sys Δt into the future. All keyword arguments are passed directly to OrdinaryDiffEq solvers.\n\n\n\n\n\n","category":"function"},{"location":"TwoBody/types/#TwoBody-Data-Structures","page":"Data Structures and Types","title":"TwoBody Data Structures","text":"","category":"section"},{"location":"TwoBody/types/","page":"Data Structures and Types","title":"Data Structures and Types","text":"The TwoBody module contains two key structures: Orbit and CelestialBody.","category":"page"},{"location":"TwoBody/types/","page":"Data Structures and Types","title":"Data Structures and Types","text":"An Orbit is the core structure for TwoBody calculations. It contains an orbital state (both Cartesian and the equivalent Keplerian representation), and a central body.","category":"page"},{"location":"TwoBody/types/","page":"Data Structures and Types","title":"Data Structures and Types","text":"The central body within Orbit is of type CelestialBody. Common bodies in our solar system have been added for convenience, as described in Default CelestialBodies, but you can also make your own.","category":"page"},{"location":"TwoBody/types/","page":"Data Structures and Types","title":"Data Structures and Types","text":"Orbit\nCelestialBody","category":"page"},{"location":"TwoBody/types/#UnitfulAstrodynamics.TwoBody.Orbit","page":"Data Structures and Types","title":"UnitfulAstrodynamics.TwoBody.Orbit","text":"Orbit{T<:AbstractConic}\n\nStruct for storing TwoBody orbital states for all conics.\n\n\n\n\n\n","category":"type"},{"location":"TwoBody/types/#UnitfulAstrodynamics.TwoBody.CelestialBody","page":"Data Structures and Types","title":"UnitfulAstrodynamics.TwoBody.CelestialBody","text":"struct CelestialBody(m, R, μ)\nCelestialBody(m, R) = CelestialBody(m, R, G * m)\n\nType representing large bodies in space. Currently, the following solar system bodies are supported:\n\nSun, Mercury, Venus, Earth, Moon (Luna), Mars, Jupiter,  Saturn, Uranus, Neptune, Pluto.\n\n\n\n\n\n","category":"type"},{"location":"TwoBody/types/#Abstract-Types-and-Pre-defined-Parameters","page":"Data Structures and Types","title":"Abstract Types and Pre-defined Parameters","text":"","category":"section"},{"location":"TwoBody/types/","page":"Data Structures and Types","title":"Data Structures and Types","text":"The first section in TwoBody documentation described the core TwoBody Data Structures. Each data structure has an abstract parent type. All Orbit structures extend TwoBodySystem. In addition, all Orbit structures are paremeterized by their conic section, which is of type AbstractConic. All conic sections are pre-defined structures: Circular, Elliptical, Parabolic, Hyperbolic, and the Invalid conic is used to describe invalid orbital states (such as providing a NaN value to an Orbit constructor).","category":"page"},{"location":"TwoBody/types/","page":"Data Structures and Types","title":"Data Structures and Types","text":"TwoBodySystem\nAbstractConic\nCircular\nElliptical\nParabolic\nHyperbolic\nInvalid\nInvalidOrbit","category":"page"},{"location":"TwoBody/types/#UnitfulAstrodynamics.TwoBody.TwoBodySystem","page":"Data Structures and Types","title":"UnitfulAstrodynamics.TwoBody.TwoBodySystem","text":"TwoBodyState\n\nAbstract type for all two-body orbital representations.\n\n\n\n\n\n","category":"type"},{"location":"TwoBody/types/#UnitfulAstrodynamics.TwoBody.AbstractConic","page":"Data Structures and Types","title":"UnitfulAstrodynamics.TwoBody.AbstractConic","text":"AbstractConic\n\nAbstract type for all four conic sections.\n\n\n\n\n\n","category":"type"},{"location":"TwoBody/types/#UnitfulAstrodynamics.TwoBody.Circular","page":"Data Structures and Types","title":"UnitfulAstrodynamics.TwoBody.Circular","text":"Circular\n\nType for orbits in the circular conic section.\n\n\n\n\n\n","category":"type"},{"location":"TwoBody/types/#UnitfulAstrodynamics.TwoBody.Elliptical","page":"Data Structures and Types","title":"UnitfulAstrodynamics.TwoBody.Elliptical","text":"Elliptical\n\nType for orbits in the elliptical conic section.\n\n\n\n\n\n","category":"type"},{"location":"TwoBody/types/#UnitfulAstrodynamics.TwoBody.Parabolic","page":"Data Structures and Types","title":"UnitfulAstrodynamics.TwoBody.Parabolic","text":"Parabolic\n\nType for orbits in the parabolic conic section.\n\n\n\n\n\n","category":"type"},{"location":"TwoBody/types/#UnitfulAstrodynamics.TwoBody.Hyperbolic","page":"Data Structures and Types","title":"UnitfulAstrodynamics.TwoBody.Hyperbolic","text":"Hyperbolic\n\nType for orbits in the hyperbolic conic section.\n\n\n\n\n\n","category":"type"},{"location":"TwoBody/types/#UnitfulAstrodynamics.TwoBody.Invalid","page":"Data Structures and Types","title":"UnitfulAstrodynamics.TwoBody.Invalid","text":"Invalid\n\nType for invalid orbits (orbits with NaN fields)\n\n\n\n\n\n","category":"type"},{"location":"TwoBody/types/#UnitfulAstrodynamics.TwoBody.InvalidOrbit","page":"Data Structures and Types","title":"UnitfulAstrodynamics.TwoBody.InvalidOrbit","text":"InvalidOrbit(body::CelestialBody)\n\nReturns a Orbit with NaN state values. Used by  propagate_twobody and kepler to indicate failed convergance.\n\n\n\n\n\n","category":"function"},{"location":"TwoBody/types/#Default-CelestialBodies","page":"Data Structures and Types","title":"Default CelestialBodies","text":"","category":"section"},{"location":"TwoBody/types/","page":"Data Structures and Types","title":"Data Structures and Types","text":"For convenence, the following common bodies in our solar system have already been defined!","category":"page"},{"location":"TwoBody/types/","page":"Data Structures and Types","title":"Data Structures and Types","text":"Sun\nMercury \nVenus\nEarth \nMoon\nLuna\nMars\nJupiter \nSaturn\nUranus\nNeptune\nPluto","category":"page"},{"location":"Overview/about/#Package-Overview","page":"About","title":"Package Overview","text":"","category":"section"},{"location":"Overview/about/","page":"About","title":"About","text":"UnitfulAstrodynamics.jl is a Unitful Astrodynamics library, which includes TwoBody and NBody problem calculations, as well as orbit propagation and plotting!","category":"page"},{"location":"Overview/about/#Motivation","page":"About","title":"Motivation","text":"","category":"section"},{"location":"Overview/about/","page":"About","title":"About","text":"This package aims to provide a simple interface for common astrodynamics problems. It was created to learn more about Astrodynamics, and will be developed alongside a Graduate Astrodynamics course at the University of Maryland. The packages JuliaSpace/Astrodynamics.jl JuliaAstro/AstroBase.jlare more fully featured. I will continue adding features to this package, but for a more complete feature set, use the packages provided by JuliaSpace and JuliaAstro.","category":"page"},{"location":"Overview/about/#Credits","page":"About","title":"Credits","text":"","category":"section"},{"location":"Overview/about/","page":"About","title":"About","text":"[1] Vallado, David A. Fundamentals of astrodynamics and applications. Vol. 12. Springer Science & Business Media, 2001.","category":"page"},{"location":"Overview/about/","page":"About","title":"About","text":"All equations and algorithms within UnitfulAstrodynamics are pulled from Vallado's Fundamentals of Astrodynamics and Applications, as well as course notes from ENAE 601 (Astrodynamics) at the University of Maryland.","category":"page"},{"location":"Overview/about/","page":"About","title":"About","text":"[2] JuliaAstro/AstroBase.jl","category":"page"},{"location":"Overview/about/","page":"About","title":"About","text":"AstroBase is referenced as a well thought-out Julia package structure example (I'm new to Julia!), as well as feature ideas.","category":"page"},{"location":"Overview/about/","page":"About","title":"About","text":"[3] Unitful.jl and UnitfulAstro.jl are used for unit handling.","category":"page"},{"location":"Overview/contents/#Table-of-Contents","page":"Table of Contents","title":"Table of Contents","text":"","category":"section"},{"location":"Overview/contents/#Index","page":"Table of Contents","title":"Index","text":"","category":"section"},{"location":"Overview/contents/","page":"Table of Contents","title":"Table of Contents","text":"Pages = [\"Overview/about.md\", \"Overview/usage.md\"]\nDepth = 3","category":"page"},{"location":"Overview/contents/#TwoBody","page":"Table of Contents","title":"TwoBody","text":"","category":"section"},{"location":"Overview/contents/","page":"Table of Contents","title":"Table of Contents","text":"Pages = [\"TwoBody/types.md\", \"TwoBody/functions.md\"]\nDepth = 3","category":"page"},{"location":"Overview/contents/#NBody","page":"Table of Contents","title":"NBody","text":"","category":"section"},{"location":"Overview/contents/","page":"Table of Contents","title":"Table of Contents","text":"Pages = [\"NBody/types.md\", \"NBody/functions.md\"]\nDepth = 3","category":"page"},{"location":"Overview/contents/#Propagators","page":"Table of Contents","title":"Propagators","text":"","category":"section"},{"location":"Overview/contents/","page":"Table of Contents","title":"Table of Contents","text":"Pages = [\"Propagators/types.md\", \"Propagators/functions.md\"]\nDepth = 3","category":"page"},{"location":"Overview/contents/#Plots","page":"Table of Contents","title":"Plots","text":"","category":"section"},{"location":"Overview/contents/","page":"Table of Contents","title":"Table of Contents","text":"Pages = [\"Plots/functions.md\"]\nDepth = 3","category":"page"},{"location":"Overview/contents/#Common-Abstract-Types","page":"Table of Contents","title":"Common Abstract Types","text":"","category":"section"},{"location":"Overview/contents/","page":"Table of Contents","title":"Table of Contents","text":"Pages = [\"AbstractTypes/types.md\"]\nDepth = 3","category":"page"},{"location":"AbstractTypes/types/#Common-AbstractTypes","page":"Types","title":"Common AbstractTypes","text":"","category":"section"},{"location":"AbstractTypes/types/","page":"Types","title":"Types","text":"The following abstract types are defined, which are common parent types for all submodules within Astrodynamics.","category":"page"},{"location":"AbstractTypes/types/","page":"Types","title":"Types","text":"AbstractBody\nOrbitalSystem\nPropagationResult","category":"page"},{"location":"AbstractTypes/types/#UnitfulAstrodynamics.AbstractTypes.AbstractBody","page":"Types","title":"UnitfulAstrodynamics.AbstractTypes.AbstractBody","text":"AbstractBody\n\nAbstract type for bodies in space: both CelestialBodys (in TwoBody.jl), and Bodys (in NBody.jl).\n\n\n\n\n\n","category":"type"},{"location":"AbstractTypes/types/#UnitfulAstrodynamics.AbstractTypes.OrbitalSystem","page":"Types","title":"UnitfulAstrodynamics.AbstractTypes.OrbitalSystem","text":"AbstractSystem\n\nAbstract type describing all states in select Astrodynamics problems.\n\n\n\n\n\n","category":"type"},{"location":"AbstractTypes/types/#UnitfulAstrodynamics.AbstractTypes.PropagationResult","page":"Types","title":"UnitfulAstrodynamics.AbstractTypes.PropagationResult","text":"PropagationResult\n\nAbstract type describing a collection of states resulting from \n\n\n\n\n\n","category":"type"},{"location":"TwoBody/functions/#TwoBody-Calculations","page":"Functions","title":"TwoBody Calculations","text":"","category":"section"},{"location":"TwoBody/functions/","page":"Functions","title":"Functions","text":"For convenience, common TwoBody problem calculations are provided through functions.  Often, these functions are provided with common arguments (such as orbital_period(a,μ)), and with TwoBody Data Structures arguments (such as orbital_period(::Orbit)).","category":"page"},{"location":"TwoBody/functions/#Orbital-Representations","page":"Functions","title":"Orbital Representations","text":"","category":"section"},{"location":"TwoBody/functions/","page":"Functions","title":"Functions","text":"You can convert between Cartesian and Keplerian TwoBody orbital representations by using cartesian and keplerian.","category":"page"},{"location":"TwoBody/functions/","page":"Functions","title":"Functions","text":"cartesian\nkeplerian\ninertial\nperifocal","category":"page"},{"location":"TwoBody/functions/#UnitfulAstrodynamics.TwoBody.cartesian","page":"Functions","title":"UnitfulAstrodynamics.TwoBody.cartesian","text":"cartesian(e, a, i, Ω, ω, ν, μ)\n\nReturns a Cartesian representation of a Keplerian two-body orbital state in an inertial frame, centered at the center of mass of the central body. Algorithm taught in ENAE601.\n\n\n\n\n\n","category":"function"},{"location":"TwoBody/functions/#UnitfulAstrodynamics.TwoBody.keplerian","page":"Functions","title":"UnitfulAstrodynamics.TwoBody.keplerian","text":"keplerian(rᵢ, vᵢ, body::CelestialBody)\n\nReturns a Keplarian representation of a Cartesian orbital state. Algorithm taught in ENAE601.\n\n\n\n\n\n","category":"function"},{"location":"TwoBody/functions/#UnitfulAstrodynamics.TwoBody.inertial","page":"Functions","title":"UnitfulAstrodynamics.TwoBody.inertial","text":"inertial(i, Ω, ω, vec₃)\ninertial(orbit::Orbit)\n\nTransforms 3-vector from Perifocal frame to Cartesian space (x,y,z).\n\n\n\n\n\n","category":"function"},{"location":"TwoBody/functions/#UnitfulAstrodynamics.TwoBody.perifocal","page":"Functions","title":"UnitfulAstrodynamics.TwoBody.perifocal","text":"perifocal(i, Ω, ω, vec₃)\nperifocal(orbit::Orbit)\n\nTransforms 3-vector from Cartesian frame to Perifocal frame.\n\n\n\n\n\n","category":"function"},{"location":"TwoBody/functions/#Kepler's-Prediction-Problem","page":"Functions","title":"Kepler's Prediction Problem","text":"","category":"section"},{"location":"TwoBody/functions/","page":"Functions","title":"Functions","text":"The function kepler can solve Kepler's Prediction Problem for an Orbit.","category":"page"},{"location":"TwoBody/functions/","page":"Functions","title":"Functions","text":"kepler","category":"page"},{"location":"TwoBody/functions/#UnitfulAstrodynamics.TwoBody.kepler","page":"Functions","title":"UnitfulAstrodynamics.TwoBody.kepler","text":"kepler(orbit::T, Δtᵢ::N = orbital_period(orbit)) where {T<:Orbit, N<:Number}\n\nSolves Kepler's Problem for orbit and Δtᵢ.\n\n\n\n\n\n","category":"function"},{"location":"TwoBody/functions/#Common-TwoBody-Problem-Calculations","page":"Functions","title":"Common TwoBody Problem Calculations","text":"","category":"section"},{"location":"TwoBody/functions/","page":"Functions","title":"Functions","text":"semimajor_axis\neccentricity\neccentricity_vector\ninclination\ntrue_anomoly\nperiapsis_radius\napoapsis_radius\nperiapsis_velocity\napoapsis_velocity\nradius\nvelocity\norbital_period\ntime_since_periapsis\nmean_motion\nsemi_parameter\nconic_anomoly\nspecific_angular_momentum\nspecific_angular_momentum_vector\nspecific_energy\nconic\nisinvalid\nisapprox\nisequal","category":"page"},{"location":"TwoBody/functions/#UnitfulAstrodynamics.TwoBody.semimajor_axis","page":"Functions","title":"UnitfulAstrodynamics.TwoBody.semimajor_axis","text":"semimajor_axis(r, v, μ)\nsemimajor_axis(orbit::Orbit)\n\nReturns semimajor axis parameter, a.\n\n\n\n\n\n","category":"function"},{"location":"TwoBody/functions/#UnitfulAstrodynamics.TwoBody.eccentricity","page":"Functions","title":"UnitfulAstrodynamics.TwoBody.eccentricity","text":"eccentricity(rᵢ, vᵢ, μ)\neccentricity(orbit::Orbit)\n\nReturns orbital eccentricity, e.\n\n\n\n\n\n","category":"function"},{"location":"TwoBody/functions/#UnitfulAstrodynamics.TwoBody.eccentricity_vector","page":"Functions","title":"UnitfulAstrodynamics.TwoBody.eccentricity_vector","text":"eccentricity_vector(rᵢ, vᵢ, μ)\neccentricity_vector(orbit::Orbit)\n\nReturns orbital eccentricity vector e̅.\n\n\n\n\n\n","category":"function"},{"location":"TwoBody/functions/#UnitfulAstrodynamics.TwoBody.inclination","page":"Functions","title":"UnitfulAstrodynamics.TwoBody.inclination","text":"inclination(orbit::Orbit)\n\nReturns orbital inclination, i.\n\n\n\n\n\n","category":"function"},{"location":"TwoBody/functions/#UnitfulAstrodynamics.TwoBody.true_anomoly","page":"Functions","title":"UnitfulAstrodynamics.TwoBody.true_anomoly","text":"true_anomoly(r, h, e, μ)\n\nReturns true anomoly, ν.\n\n\n\n\n\n","category":"function"},{"location":"TwoBody/functions/#UnitfulAstrodynamics.TwoBody.periapsis_radius","page":"Functions","title":"UnitfulAstrodynamics.TwoBody.periapsis_radius","text":"periapsis_radius(a, e)\nperiapsis_radius(orbit::Orbit)\n\nReturns periapsis radius, rᵢ_p.\n\n\n\n\n\n","category":"function"},{"location":"TwoBody/functions/#UnitfulAstrodynamics.TwoBody.apoapsis_radius","page":"Functions","title":"UnitfulAstrodynamics.TwoBody.apoapsis_radius","text":"apoapsis_radius(a, e)\napoapsis_radius(orbit::Orbit)\n\nReturns periapsis radius, r_a.\n\n\n\n\n\n","category":"function"},{"location":"TwoBody/functions/#UnitfulAstrodynamics.TwoBody.periapsis_velocity","page":"Functions","title":"UnitfulAstrodynamics.TwoBody.periapsis_velocity","text":"periapsis_velocity(orbit::T) where T<:Orbit\n\nReturns periapsis velocity, v_p, for any orbital representation.\n\n\n\n\n\n","category":"function"},{"location":"TwoBody/functions/#UnitfulAstrodynamics.TwoBody.apoapsis_velocity","page":"Functions","title":"UnitfulAstrodynamics.TwoBody.apoapsis_velocity","text":"apoapsis_velocity(orbit::T) where T<:Orbit\n\nReturns apoapsis velocity, v_a, for any orbital representation.\n\n\n\n\n\n","category":"function"},{"location":"TwoBody/functions/#UnitfulAstrodynamics.TwoBody.radius","page":"Functions","title":"UnitfulAstrodynamics.TwoBody.radius","text":"radius(p, e, ν)\nradius(orbit::Orbit)\n\nReturns instantaneous radius, r.\n\n\n\n\n\n","category":"function"},{"location":"TwoBody/functions/#UnitfulAstrodynamics.TwoBody.velocity","page":"Functions","title":"UnitfulAstrodynamics.TwoBody.velocity","text":"velocity(r, a, μ)\nvelocity(orbit::Orbit)\n\nReturns instantaneous velocity, v, for any orbital representation.\n\n\n\n\n\n","category":"function"},{"location":"TwoBody/functions/#UnitfulAstrodynamics.TwoBody.orbital_period","page":"Functions","title":"UnitfulAstrodynamics.TwoBody.orbital_period","text":"orbital_period(a, μ)\norbital_period(orbit::Orbit)\n\nReturns the orbital period.\n\n\n\n\n\n","category":"function"},{"location":"TwoBody/functions/#UnitfulAstrodynamics.TwoBody.time_since_periapsis","page":"Functions","title":"UnitfulAstrodynamics.TwoBody.time_since_periapsis","text":"time_since_periapsis(n, e, E)\ntime_since_periapsis(orbit::Orbit)\n\nReturns time since periapsis, t.\n\n\n\n\n\n","category":"function"},{"location":"TwoBody/functions/#UnitfulAstrodynamics.TwoBody.mean_motion","page":"Functions","title":"UnitfulAstrodynamics.TwoBody.mean_motion","text":"mean_motion(a, μ)\nmean_motion(orbit::Orbit)\n\nReturns mean motion, n.\n\n\n\n\n\n","category":"function"},{"location":"TwoBody/functions/#UnitfulAstrodynamics.TwoBody.semi_parameter","page":"Functions","title":"UnitfulAstrodynamics.TwoBody.semi_parameter","text":"semi_parameter(a, e)\nsemi_parameter(orbit::Orbit)\n\nReturns semilatus parameter, p.\n\n\n\n\n\n","category":"function"},{"location":"TwoBody/functions/#UnitfulAstrodynamics.TwoBody.conic_anomoly","page":"Functions","title":"UnitfulAstrodynamics.TwoBody.conic_anomoly","text":"conic_anomoly(orbit::Orbit{Elliptical})\nconic_anomoly(orbit::Orbit{Hyperbolic})\n\nReturns eccentric anomoly, E, parabolic anomoly, B, or hyperbolic  anomoly, H. \n\n\n\n\n\n","category":"function"},{"location":"TwoBody/functions/#UnitfulAstrodynamics.TwoBody.specific_angular_momentum","page":"Functions","title":"UnitfulAstrodynamics.TwoBody.specific_angular_momentum","text":"specific_angular_momentum(rᵢ, vᵢ)\nspecific_angular_momentum(orbit::Orbit)\n\nReturns scalar specific angular momentum vector, h.\n\n\n\n\n\n","category":"function"},{"location":"TwoBody/functions/#UnitfulAstrodynamics.TwoBody.specific_angular_momentum_vector","page":"Functions","title":"UnitfulAstrodynamics.TwoBody.specific_angular_momentum_vector","text":"specific_angular_momentum_vector(rᵢ, vᵢ)\nspecific_angular_momentum_vector(orbit::Orbit)\n\nReturns specific angular momentum vector, h̅.\n\n\n\n\n\n","category":"function"},{"location":"TwoBody/functions/#UnitfulAstrodynamics.TwoBody.specific_energy","page":"Functions","title":"UnitfulAstrodynamics.TwoBody.specific_energy","text":"specific_energy(a, μ)\nspecific_energy(r, v, μ)\nspecific_energy(orbit::Orbit)\n\nReturns specific orbital energy, ϵ.\n\n\n\n\n\n","category":"function"},{"location":"TwoBody/functions/#UnitfulAstrodynamics.TwoBody.conic","page":"Functions","title":"UnitfulAstrodynamics.TwoBody.conic","text":"conic(e::T) where T<:Number\nconic(orbit::Orbit)\n\nReturns the conic section, as specified by eccentricity e.\n\n\n\n\n\n","category":"function"},{"location":"TwoBody/functions/#UnitfulAstrodynamics.TwoBody.isinvalid","page":"Functions","title":"UnitfulAstrodynamics.TwoBody.isinvalid","text":"isinvalid(orbit::Orbit)\n\nChecks for NaN valued orbital states, which are used to indicate an invalid Orbit.\n\n\n\n\n\n","category":"function"},{"location":"TwoBody/functions/#Base.isapprox","page":"Functions","title":"Base.isapprox","text":"isapprox(::Orbit, ::Orbit; atol=1e-8)\n\nReturns true if all elements in each system are within atol of the other.\n\n\n\n\n\n","category":"function"},{"location":"TwoBody/functions/#Base.isequal","page":"Functions","title":"Base.isequal","text":"isequal(::Orbit, ::Orbit)\n\nReturns true if all elements of each system are identically equal.\n\n\n\n\n\n","category":"function"},{"location":"#UnitfulAstrodynamics.jl-Documentation","page":"Getting Started","title":"UnitfulAstrodynamics.jl Documentation","text":"","category":"section"},{"location":"#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"#Installation","page":"Getting Started","title":"Installation","text":"","category":"section"},{"location":"","page":"Getting Started","title":"Getting Started","text":"UnitfulAstrodynamics is included in Julia's General package registry.","category":"page"},{"location":"","page":"Getting Started","title":"Getting Started","text":"# In Julia's REPL\n]add UnitfulAstrodynamics\n\n# Or, with `Pkg`\nPkg.add(\"UnitfulAstrodynamics\")","category":"page"},{"location":"#Units-are-Required!","page":"Getting Started","title":"Units are Required!","text":"","category":"section"},{"location":"","page":"Getting Started","title":"Getting Started","text":"UnitfulAstrodynamics.jl uses Reexport.jl to expose Unitful, UnitfulAstro, and UnitfulAngles. Units are required for all TwoBody and NBody computations, and all required types in Unitful, UnitfulAstro, and UnitfulAngles are included with UnitfulAstrodynamics when you call using UnitfulAstrodynamics.","category":"page"},{"location":"#Two-body-Problem","page":"Getting Started","title":"Two-body Problem","text":"","category":"section"},{"location":"","page":"Getting Started","title":"Getting Started","text":"The TwoBody module handles Astrodynamics scenarios within the two-body problem. You can make a Orbit by specifying a CelestialBody (Sun, Earth, Moon, Mars, etc.), and a Cartesian or Keplerian state.","category":"page"},{"location":"","page":"Getting Started","title":"Getting Started","text":"# Cartesian state to Orbit\nr      = [0.0, 11681.0, 0.0]u\"km\"\nv      = [5.134, 4.226, 2.787]u\"km/s\"\norbit1 = Orbit(r, v, Earth)\n\n# Keplerian state to Orbit\ne      =  0.3\na      =  15000    * u\"km\" + Earth.R\ni      =  10       * u\"°\"\nΩ      =  0        * u\"°\"\nω      =  10       * u\"°\"\nν      =  0        * u\"°\"\norbit2 =  Orbit(e, a, i, Ω, ω, ν, Earth)\n\n# This is a true fact!\norbit1 ≈ orbit2\n\n# For the rest of this section...\norbit = orbit1","category":"page"},{"location":"","page":"Getting Started","title":"Getting Started","text":"Now you can solve Kepler's Prediction Problem,  propagate the satellite's trajectory over a specified intervol in time, and plot the resultant trajectory with Plots.jl.","category":"page"},{"location":"","page":"Getting Started","title":"Getting Started","text":"# Kepler's Prediction problem\norbit_later = kepler(orbit, orbital_period(orbit))\n\n# Orbit propagation\nsols = propagate(orbit, orbital_period(orbit))\n\n# Plotting (with Plots.jl kwargs)\nplot3d(sols; title=\"Plots.jl keywords work!\", xlabel=\"Woo\")\n\n# Another true fact!\nsols.step[end] ≈ orbit_later","category":"page"},{"location":"","page":"Getting Started","title":"Getting Started","text":"You may have noticed the orbital_period function. All common two-body problem equations have been included as functions with common arguments,orbital_period(a, μ), and with Astrodynamics.jl structure arguments, orbital_period(orbit). The current list of supported functions is described in TwoBody Calculations.","category":"page"},{"location":"","page":"Getting Started","title":"Getting Started","text":"Not sure how to use one of those helper functions? Check the docstrings in Julia's REPL!","category":"page"},{"location":"","page":"Getting Started","title":"Getting Started","text":"help?> eccentricity\nsearch: eccentricity eccentricity_vector\n\n  eccentricity(r̅, v̅, μ)\n  eccentricity(orbit::Orbit)\n\n  Returns orbital eccentricity, e.","category":"page"},{"location":"#NBody","page":"Getting Started","title":"NBody","text":"","category":"section"},{"location":"","page":"Getting Started","title":"Getting Started","text":"The NBody module helps to solve the classical gravitational NBody problem. This is the baby version - point mass bodies, and no relativity. But it's still useful!","category":"page"},{"location":"","page":"Getting Started","title":"Getting Started","text":"You can make your own Body by specifying an initial Cartesian state, and a mass.","category":"page"},{"location":"","page":"Getting Started","title":"Getting Started","text":"# It's MY Earth, and I want it now\nr₁ = [0.0, 0.0, 0.0]u\"km\"\nv₁ = [0.0, 0.0, 0.0]u\"km/s\"\nm₁ = Earth.m\nmyEarth = Body(r₁, v₁, m₁)\n\n# And we'll need a satellite...\nr₂ = [0.0, 11681.0, 0.0]u\"km\"\nv₂ = [5.134, 4.226, 2.787]u\"km/s\"\nm₂ = 1000.0u\"kg\"\nmySatellite = Body(r₂, v₂, m₂)","category":"page"},{"location":"","page":"Getting Started","title":"Getting Started","text":"A MultibodySystem contains an array of Bodies.","category":"page"},{"location":"","page":"Getting Started","title":"Getting Started","text":"# Construct a MultibodySystem\nsys = MultibodySystem([myEarth, mySatellite])","category":"page"},{"location":"","page":"Getting Started","title":"Getting Started","text":"And you can propagate a MultibodySystem through time to numerically find the final states for each Body. The package DifferentialEquations.jl is used for the numerical integration. For all propagation functions in Astrodynamics.jl, you can specify kwargs as you would for a DifferentialEquations.jl solve call.","category":"page"},{"location":"","page":"Getting Started","title":"Getting Started","text":"# Propagate n-body system\nsols = propagate(sys, 10000u\"s\"; abstol=1e-14, reltol=1e-14)","category":"page"},{"location":"","page":"Getting Started","title":"Getting Started","text":"As with a two-body Orbit, you can also plot each timestep in the n-body propagation.","category":"page"},{"location":"","page":"Getting Started","title":"Getting Started","text":"# Plot n-body propagation results\nplot3d(sols; title=\"Plots.jl keywords work!\", xlabel=\"Woo\")","category":"page"}]
}
